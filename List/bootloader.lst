
AVRASM ver. 2.1.30  C:\Users\user\Desktop\Obmen\boot_test\ATmega328\List\bootloader.asm Mon Nov 15 15:50:00 2021

C:\Users\user\Desktop\Obmen\boot_test\ATmega328\List\bootloader.asm(1090): warning: Register r4 already defined by the .DEF directive
C:\Users\user\Desktop\Obmen\boot_test\ATmega328\List\bootloader.asm(1091): warning: Register r5 already defined by the .DEF directive
C:\Users\user\Desktop\Obmen\boot_test\ATmega328\List\bootloader.asm(1092): warning: Register r6 already defined by the .DEF directive
C:\Users\user\Desktop\Obmen\boot_test\ATmega328\List\bootloader.asm(1093): warning: Register r7 already defined by the .DEF directive
C:\Users\user\Desktop\Obmen\boot_test\ATmega328\List\bootloader.asm(1094): warning: Register r9 already defined by the .DEF directive
C:\Users\user\Desktop\Obmen\boot_test\ATmega328\List\bootloader.asm(1095): warning: Register r8 already defined by the .DEF directive
C:\Users\user\Desktop\Obmen\boot_test\ATmega328\List\bootloader.asm(1096): warning: Register r10 already defined by the .DEF directive
C:\Users\user\Desktop\Obmen\boot_test\ATmega328\List\bootloader.asm(1097): warning: Register r11 already defined by the .DEF directive
C:\Users\user\Desktop\Obmen\boot_test\ATmega328\List\bootloader.asm(1098): warning: Register r12 already defined by the .DEF directive
C:\Users\user\Desktop\Obmen\boot_test\ATmega328\List\bootloader.asm(1099): warning: Register r13 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Release
                 ;Chip type              : ATmega328P
                 ;Program type           : Boot Loader
                 ;Clock frequency        : 7,372800 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': No
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega328P
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU EECR=0x1F
                 	.EQU EEDR=0x20
                 	.EQU EEARL=0x21
                 	.EQU EEARH=0x22
                 	.EQU SPSR=0x2D
                 	.EQU SPDR=0x2E
                 	.EQU SMCR=0x33
                 	.EQU MCUSR=0x34
                 	.EQU MCUCR=0x35
                 	.EQU WDTCSR=0x60
                 	.EQU UCSR0A=0xC0
                 	.EQU UDR0=0xC6
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU GPIOR0=0x1E
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x08FF
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _address=R4
                 	.DEF _address_msb=R5
                 	.DEF _loop_index=R6
                 	.DEF _loop_index_msb=R7
                 	.DEF _i=R9
                 	.DEF _j=R8
                 	.DEF _page_counter=R10
                 	.DEF _page_counter_msb=R11
                 	.DEF _last_pkg_size=R12
                 	.DEF _last_pkg_size_msb=R13
                 
                 ;GPIOR0 INITIALIZATION VALUE
                 	.EQU __GPIOR0_INIT=0x00
                 
                 	.CSEG
                 	.ORG 0x3800
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
003800 940c 3850 	JMP  __RESET
003802 940c 3800 	JMP  0x3800
003804 940c 3800 	JMP  0x3800
003806 940c 3800 	JMP  0x3800
003808 940c 3800 	JMP  0x3800
00380a 940c 3800 	JMP  0x3800
00380c 940c 3800 	JMP  0x3800
00380e 940c 3800 	JMP  0x3800
003810 940c 3800 	JMP  0x3800
003812 940c 3800 	JMP  0x3800
003814 940c 3800 	JMP  0x3800
003816 940c 3800 	JMP  0x3800
003818 940c 3800 	JMP  0x3800
00381a 940c 3889 	JMP  _timer1_ovf_isr
00381c 940c 3800 	JMP  0x3800
00381e 940c 3800 	JMP  0x3800
003820 940c 3800 	JMP  0x3800
003822 940c 3800 	JMP  0x3800
003824 940c 38a2 	JMP  _usart_rx_isr
003826 940c 3800 	JMP  0x3800
003828 940c 3800 	JMP  0x3800
00382a 940c 3800 	JMP  0x3800
00382c 940c 3800 	JMP  0x3800
00382e 940c 3800 	JMP  0x3800
003830 940c 3800 	JMP  0x3800
003832 940c 3800 	JMP  0x3800
                 
                 _tbl10_G100:
003834 2710
003835 03e8
003836 0064
003837 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
003838 0001      	.DB  0x1,0x0
                 _tbl16_G100:
003839 1000
00383a 0100
00383b 0010
00383c 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
00383d 0000
00383e 0000      	.DB  0x0,0x0,0x0,0x0
00383f 0000
003840 0000      	.DB  0x0,0x0,0x0,0x0
                 
                 _0x3:
003841 3130
003842 3332
003843 3534
003844 3736      	.DB  0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37
003845 3938
003846 4241
003847 4443
003848 4645      	.DB  0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46
                 
                 __GLOBAL_INI_TBL:
003849 0008      	.DW  0x08
00384a 0004      	.DW  0x04
00384b 707a      	.DW  __REG_VARS*2
                 
00384c 0010      	.DW  0x10
00384d 0302      	.DW  _lookup
00384e 7082      	.DW  _0x3*2
                 
                 _0xFFFFFFFF:
00384f 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
003850 94f8      	CLI
003851 27ee      	CLR  R30
003852 bbef      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF THE BOOT LOADER
003853 e0f1      	LDI  R31,1
003854 bff5      	OUT  MCUCR,R31
003855 e0f2      	LDI  R31,2
003856 bff5      	OUT  MCUCR,R31
                 
                 ;DISABLE WATCHDOG
003857 e1f8      	LDI  R31,0x18
003858 95a8      	WDR
003859 b7a4      	IN   R26,MCUSR
00385a 7fa7      	CBR  R26,8
00385b bfa4      	OUT  MCUSR,R26
00385c 93f0 0060 	STS  WDTCSR,R31
00385e 93e0 0060 	STS  WDTCSR,R30
                 
                 ;CLEAR R2-R14
003860 e08d      	LDI  R24,(14-2)+1
003861 e0a2      	LDI  R26,2
003862 27bb      	CLR  R27
                 __CLEAR_REG:
003863 93ed      	ST   X+,R30
003864 958a      	DEC  R24
003865 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
003866 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
003867 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
003868 e0a0      	LDI  R26,LOW(__SRAM_START)
003869 e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
00386a 93ed      	ST   X+,R30
00386b 9701      	SBIW R24,1
00386c f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00386d e9e2      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00386e e7f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00386f 9185      	LPM  R24,Z+
003870 9195      	LPM  R25,Z+
003871 9700      	SBIW R24,0
003872 f061      	BREQ __GLOBAL_INI_END
003873 91a5      	LPM  R26,Z+
003874 91b5      	LPM  R27,Z+
003875 9005      	LPM  R0,Z+
003876 9015      	LPM  R1,Z+
003877 01bf      	MOVW R22,R30
003878 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
003879 9005      	LPM  R0,Z+
00387a 920d      	ST   X+,R0
00387b 9701      	SBIW R24,1
00387c f7e1      	BRNE __GLOBAL_INI_LOOP
00387d 01fb      	MOVW R30,R22
00387e cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;GPIOR0 INITIALIZATION
00387f e0e0      	LDI  R30,__GPIOR0_INIT
003880 bbee      	OUT  GPIOR0,R30
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
003881 efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
003882 bfed      	OUT  SPL,R30
003883 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
003884 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
003885 e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
003886 e0d3      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
003887 940c 38d4 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x300
                 
                 	.CSEG
                 ;
                 ;//------------------------------------- INCLUDES ------------------------------
                 ;#include "defines.h"
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x01
                 	.EQU __sm_mask=0x0E
                 	.EQU __sm_adc_noise_red=0x02
                 	.EQU __sm_powerdown=0x04
                 	.EQU __sm_powersave=0x06
                 	.EQU __sm_standby=0x0C
                 	.EQU __sm_ext_standby=0x0E
                 	.SET power_ctrl_reg=smcr
                 	#endif
                      #define WR_SPMCR_REG_R22 out 0x37,r22
                 ;#include "flash.h"
                 ;#include "crc16_modbus.h"
                 ;#include "crc16_ccitt.h"
                 ;#include <stdio.h>
                 ;
                 ;//------------------------------------- DEFINES -------------------------------
                 ;// #define DBG
                 ;
                 ;// Baud rate used for communication with the bootloader
                 ;#define	BAUD_RATE   115200
                 ;// baud rate register value calculation
                 ;#define	BRREG_VALUE	(_MCU_CLOCK_FREQUENCY_/(8*BAUD_RATE)-1)
                 ;
                 ;#define DEVICE_ID           '1'
                 ;
                 ;#define TIMER1_OVF_PERIOD   100 // time period between two timer 1 overflows [ms]
                 ;#define TIMER1_CLK_DIV      64  // value for timer 1 clock division coeficient
                 ;#define TIMER1_CNT_INIT     (65536-(_MCU_CLOCK_FREQUENCY_*TIMER1_OVF_PERIOD)/(TIMER1_CLK_DIV*1000))
                 ;
                 ;#define PKG_WAIT_TIMEOUT            5000
                 ;
                 ;#define DATA_REGISTER_EMPTY         (1<<UDRE0)
                 ;#define RX_COMPLETE                 (1<<RXC0)
                 ;#define FRAMING_ERROR               (1<<FE0)
                 ;#define PARITY_ERROR                (1<<UPE0)
                 ;#define DATA_OVERRUN                (1<<DOR0)
                 ;#define USART_DATA_READY            rx_counter0!=0
                 ;
                 ;#define true                        1
                 ;#define false                       0
                 ;
                 ;// Pakage parser
                 ;#define DATA_BUFF_SIZE              150
                 ;#define STD_PKG_SIZE                27
                 ;#define BIN_PKG_SIZE                143
                 ;#define SERVICE_DATA_SIZE           15
                 ;#define DATA_START_BYTE             10
                 ;
                 ;//EEPROM ADDRESSES
                 ;#define DEV_ID_ADDR                 0x01    //1b
                 ;#define FW_VERSION_ADDR             0x02    //1b
                 ;#define FW_SIZE_ADDR                0x03    //2b
                 ;#define LAST_WR_PAGE_ADDR           0x05    //2b
                 ;#define DOWNLOAD_CMPLT_ADDR         0x07    //1b
                 ;#define NEW_FW_VERSION_ADDR         0x08    //1b
                 ;#define EEPROM_CRC_ADDR             0x09    //2b
                 ;#define EEPROM_DATA_SIZE            8       //w/o CRC
                 ;
                 ;//------------------------------------- GLOBAL VARIABLES ----------------------
                 ;volatile unsigned int timer_1_delay_cnt;
                 ;
                 ;char lookup[] = {'0','1','2','3','4','5','6','7','8','9',
                 ;                 'A','B','C','D','E','F'};
                 
                 	.DSEG
                 ;
                 ;ADDR_t address = 0x00;
                 ;unsigned int data_buff[DATA_BUFF_SIZE];
                 ;unsigned char eprom_crc_buff[EEPROM_DATA_SIZE];
                 ;
                 ;unsigned int loop_index = 0;
                 ;char i, j;
                 ;unsigned int page_counter = 0x00;
                 ;unsigned int last_pkg_size;
                 ;unsigned int new_fw_size;
                 ;unsigned int loaded_data_size;
                 ;
                 ;// USART Receiver buffer
                 ;#define RX_BUFFER_SIZE0 150
                 ;char rx_buffer0[RX_BUFFER_SIZE0];
                 ;
                 ;unsigned char rx_wr_index0 = 0, rx_rd_index0 = 0;
                 ;unsigned char rx_counter0 = 0;
                 ;
                 ;unsigned int i_temp_var;
                 ;unsigned int j_temp_var;
                 ;
                 ;// This flag is set on USART Receiver buffer overflow
                 ;bit rx_buffer_overflow0;
                 ;
                 ;// State machine
                 ;enum
                 ;{
                 ;    IDLE = 0,
                 ;    ASK_FW_PKG,
                 ;    WAIT_BOOT_EN,
                 ;    WAIT_STD_PKG,
                 ;    WAIT_BIN_DATA,
                 ;    PARSE_START_PKG,
                 ;    PARSE_STD_PKG,
                 ;    PARSE_BIN_PKG,
                 ;    CHECK_NEW_DATA,
                 ;    EXE_CMD,
                 ;    UPD_EEPROM,
                 ;    UPD_DATA_BUFF,
                 ;    UPD_FLASH,
                 ;    ERASE_UNUSE_PAGES,
                 ;    SEND_UPG_STATUS,
                 ;
                 ;    EXIT_BOOT
                 ;};
                 ;
                 ;enum
                 ;{
                 ;    DATA_OK = 0,
                 ;    DATA_ERR
                 ;};
                 ;
                 ;enum
                 ;{
                 ;    PKG_NULL = 0,
                 ;    PKG_INF,
                 ;    PKG_RQS,
                 ;    PKG_RQL,
                 ;    PKG_UGR,
                 ;    PKG_BIN,
                 ;    PKG_CMD,
                 ;    PKG_FWV,
                 ;    PKG_FWL,
                 ;
                 ;    PKG_ERR
                 ;};
                 ;
                 ;volatile unsigned char last_pkg_type;
                 ;
                 ;unsigned char current_state;
                 ;unsigned char prev_state;
                 ;
                 ;//------------------------------------- FLAGS ---------------------------------
                 ;unsigned char fw_version_saved = false;
                 ;unsigned char fw_length_saved = false;
                 ;unsigned char last_fw_part_flg = false;
                 ;
                 ;//------------------------------------- TIMER INTERRUPT -----------------------
                 ;// Timer1 overflow interrupt service routine
                 ;// Occurs every 1 ms
                 ;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
                 ; 0000 008B {
                 
                 	.CSEG
                 _timer1_ovf_isr:
                 ; .FSTART _timer1_ovf_isr
003889 93aa      	ST   -Y,R26
00388a 93ba      	ST   -Y,R27
00388b 93ea      	ST   -Y,R30
00388c 93fa      	ST   -Y,R31
00388d b7ef      	IN   R30,SREG
00388e 93ea      	ST   -Y,R30
                 ; 0000 008C     // Reinitialize Timer1 value
                 ; 0000 008D     TCNT1H = TIMER1_CNT_INIT >> 8;
00388f 940e 3dd2 	CALL SUBOPT_0x0
                 ; 0000 008E     TCNT1L = TIMER1_CNT_INIT & 0xff;
                 ; 0000 008F 
                 ; 0000 0090     // decrement the delay counter
                 ; 0000 0091     if (timer_1_delay_cnt) --timer_1_delay_cnt;
003891 940e 3dd9 	CALL SUBOPT_0x1
003893 f039      	BREQ _0x4
003894 e0a0      	LDI  R26,LOW(_timer_1_delay_cnt)
003895 e0b3      	LDI  R27,HIGH(_timer_1_delay_cnt)
003896 91ed      	LD   R30,X+
003897 91fd      	LD   R31,X+
003898 9731      	SBIW R30,1
003899 93fe      	ST   -X,R31
00389a 93ee      	ST   -X,R30
                 ; 0000 0092 }//tim1 isr
                 _0x4:
00389b 91e9      	LD   R30,Y+
00389c bfef      	OUT  SREG,R30
00389d 91f9      	LD   R31,Y+
00389e 91e9      	LD   R30,Y+
00389f 91b9      	LD   R27,Y+
0038a0 91a9      	LD   R26,Y+
0038a1 9518      	RETI
                 ; .FEND
                 ;
                 ;//------------------------------------- USART INTERRUPT -----------------------
                 ;// USART Receiver interrupt service routine
                 ;interrupt [USART_RXC] void usart_rx_isr(void)
                 ; 0000 0097 {
                 _usart_rx_isr:
                 ; .FSTART _usart_rx_isr
0038a2 93aa      	ST   -Y,R26
0038a3 93ea      	ST   -Y,R30
0038a4 93fa      	ST   -Y,R31
0038a5 b7ef      	IN   R30,SREG
0038a6 93ea      	ST   -Y,R30
                 ; 0000 0098     char status, data;
                 ; 0000 0099     status = UCSR0A;
0038a7 931a      	ST   -Y,R17
0038a8 930a      	ST   -Y,R16
                 ;	status -> R17
                 ;	data -> R16
0038a9 9110 00c0 	LDS  R17,192
                 ; 0000 009A     data = UDR0;
0038ab 9100 00c6 	LDS  R16,198
                 ; 0000 009B     if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
0038ad 2fe1      	MOV  R30,R17
0038ae 71ec      	ANDI R30,LOW(0x1C)
0038af f4e1      	BRNE _0x5
                 ; 0000 009C     {
                 ; 0000 009D         rx_buffer0[rx_wr_index0++] = data;
0038b0 91e0 04e0 	LDS  R30,_rx_wr_index0
0038b2 5fef      	SUBI R30,-LOW(1)
0038b3 93e0 04e0 	STS  _rx_wr_index0,R30
0038b5 50e1      	SUBI R30,LOW(1)
0038b6 e0f0      	LDI  R31,0
0038b7 5be6      	SUBI R30,LOW(-_rx_buffer0)
0038b8 4ffb      	SBCI R31,HIGH(-_rx_buffer0)
0038b9 8300      	ST   Z,R16
                 ; 0000 009E 
                 ; 0000 009F         if (rx_wr_index0 == RX_BUFFER_SIZE0) rx_wr_index0 = 0;
0038ba 91a0 04e0 	LDS  R26,_rx_wr_index0
0038bc 39a6      	CPI  R26,LOW(0x96)
0038bd f419      	BRNE _0x6
0038be e0e0      	LDI  R30,LOW(0)
0038bf 93e0 04e0 	STS  _rx_wr_index0,R30
                 ; 0000 00A0 
                 ; 0000 00A1         if (++rx_counter0 == RX_BUFFER_SIZE0)
                 _0x6:
0038c1 91a0 04e2 	LDS  R26,_rx_counter0
0038c3 5faf      	SUBI R26,-LOW(1)
0038c4 93a0 04e2 	STS  _rx_counter0,R26
0038c6 39a6      	CPI  R26,LOW(0x96)
0038c7 f421      	BRNE _0x7
                 ; 0000 00A2         {
                 ; 0000 00A3             rx_counter0=0;
0038c8 e0e0      	LDI  R30,LOW(0)
0038c9 93e0 04e2 	STS  _rx_counter0,R30
                 ; 0000 00A4             rx_buffer_overflow0=1;
0038cb 9af0      	SBI  0x1E,0
                 ; 0000 00A5         }
                 ; 0000 00A6     }
                 _0x7:
                 ; 0000 00A7 }//usart isr
                 _0x5:
0038cc 9109      	LD   R16,Y+
0038cd 9119      	LD   R17,Y+
0038ce 91e9      	LD   R30,Y+
0038cf bfef      	OUT  SREG,R30
0038d0 91f9      	LD   R31,Y+
0038d1 91e9      	LD   R30,Y+
0038d2 91a9      	LD   R26,Y+
0038d3 9518      	RETI
                 ; .FEND
                 ;
                 ;//------------------------------------- PROTOTYPES ----------------------------
                 ;void startup_init(void);
                 ;void timer_1_stop();
                 ;void timer_1_start(unsigned int time_ms);
                 ;
                 ;char chip_erase(void);
                 ;unsigned int read_prog_mem(ADDR_t addr);
                 ;char write_prog_mem(ADDR_t addr, unsigned int data);
                 ;char write_page(ADDR_t addr);
                 ;char write_eeprom_mem(ADDR_t addr, unsigned char data);
                 ;char read_eeprom_mem(ADDR_t addr);
                 ;unsigned char BlockLoad(unsigned int size, unsigned int * p_data_buff, unsigned char mem_type, ADDR_t *address);
                 ;unsigned char BlockRead(unsigned int size, unsigned int * p_data_buff, unsigned char mem_type, ADDR_t *address);
                 ;void return_signature(void);
                 ;void exit_bootloader(void);
                 ;
                 ;void new_state(unsigned char new_state);
                 ;unsigned char check_save_pkg(unsigned int data_length);
                 ;void get_pkg_type(void);
                 ;void req_start_byte(unsigned int addr);
                 ;void req_data_length(unsigned int length);
                 ;void send_upgd_result(unsigned int result);
                 ;void update_eeprom_crc(void);
                 ;
                 ;char get_char(void);
                 ;void atoh(unsigned char *ascii_ptr, unsigned char *hex_ptr, unsigned int len);
                 ;//------------------------------------- MAIN ----------------------------------
                 ;void main(void)
                 ; 0000 00C5 {
                 _main:
                 ; .FSTART _main
                 ; 0000 00C6     startup_init();
0038d4 d1aa      	RCALL _startup_init
                 ; 0000 00C7 
                 ; 0000 00C8     timer_1_start(10000);
0038d5 e1a0      	LDI  R26,LOW(10000)
0038d6 e2b7      	LDI  R27,HIGH(10000)
0038d7 d1c6      	RCALL _timer_1_start
                 ; 0000 00C9 
                 ; 0000 00CA     // Global enable interrupts
                 ; 0000 00CB     #asm("sei")
0038d8 9478      	sei
                 ; 0000 00CC 
                 ; 0000 00CD     // go to wait boot enable
                 ; 0000 00CE     new_state(WAIT_BOOT_EN);
0038d9 e0a2      	LDI  R26,LOW(2)
0038da d2a3      	RCALL _new_state
                 ; 0000 00CF 
                 ; 0000 00D0     //--------------------------------- BOOT MODE -----------------------------
                 ; 0000 00D1     // main loop
                 ; 0000 00D2     #ifdef DBG
                 ; 0000 00D3         putchar('\n');
                 ; 0000 00D4         putchar('#');
                 ; 0000 00D5         putchar('>');
                 ; 0000 00D6         putchar('\n');
                 ; 0000 00D7     #endif
                 ; 0000 00D8 
                 ; 0000 00D9     while (1)
                 _0xA:
                 ; 0000 00DA     {
                 ; 0000 00DB         #asm("wdr")
0038db 95a8      	wdr
                 ; 0000 00DC 
                 ; 0000 00DD         //----------------------------- STATE MACHINE -------------------------
                 ; 0000 00DE         switch (current_state)
0038dc 91e0 04e6 	LDS  R30,_current_state
                 ; 0000 00DF         {
                 ; 0000 00E0             case WAIT_BOOT_EN:
0038de 30e2      	CPI  R30,LOW(0x2)
0038df f009      	BREQ PC+2
0038e0 c064      	RJMP _0x10
                 ; 0000 00E1                 //check EEPROM correct data
                 ; 0000 00E2                 for(loop_index = 1; loop_index < EEPROM_DATA_SIZE+1; loop_index++)
0038e1 e0e1      	LDI  R30,LOW(1)
0038e2 e0f0      	LDI  R31,HIGH(1)
0038e3 013f      	MOVW R6,R30
                 _0x12:
0038e4 e0e9      	LDI  R30,LOW(9)
0038e5 e0f0      	LDI  R31,HIGH(9)
0038e6 166e      	CP   R6,R30
0038e7 067f      	CPC  R7,R31
0038e8 f470      	BRSH _0x13
                 ; 0000 00E3                 {
                 ; 0000 00E4                     eprom_crc_buff[loop_index] = read_eeprom_mem(loop_index);
0038e9 01f3      	MOVW R30,R6
0038ea 5ce2      	SUBI R30,LOW(-_eprom_crc_buff)
0038eb 4ffb      	SBCI R31,HIGH(-_eprom_crc_buff)
0038ec 93ff      	PUSH R31
0038ed 93ef      	PUSH R30
0038ee 01d3      	MOVW R26,R6
0038ef d255      	RCALL _read_eeprom_mem
0038f0 91af      	POP  R26
0038f1 91bf      	POP  R27
0038f2 93ec      	ST   X,R30
                 ; 0000 00E5                 }
0038f3 01f3      	MOVW R30,R6
0038f4 9631      	ADIW R30,1
0038f5 013f      	MOVW R6,R30
0038f6 cfed      	RJMP _0x12
                 _0x13:
                 ; 0000 00E6                 i_temp_var = 0x0000;
0038f7 e0e0      	LDI  R30,LOW(0)
0038f8 93e0 04e3 	STS  _i_temp_var,R30
0038fa 93e0 04e4 	STS  _i_temp_var+1,R30
                 ; 0000 00E7                 i_temp_var = read_eeprom_mem(EEPROM_CRC_ADDR+1);
0038fc e0aa      	LDI  R26,LOW(10)
0038fd 940e 3ddf 	CALL SUBOPT_0x2
                 ; 0000 00E8                 i_temp_var <<= 8;
0038ff 91f0 04e3 	LDS  R31,_i_temp_var
003901 e0e0      	LDI  R30,LOW(0)
003902 940e 3de8 	CALL SUBOPT_0x3
                 ; 0000 00E9                 i_temp_var = read_eeprom_mem(EEPROM_CRC_ADDR);
003904 e0a9      	LDI  R26,LOW(9)
003905 940e 3ddf 	CALL SUBOPT_0x2
                 ; 0000 00EA                 if(i_temp_var == getCRC16_CCITT(&eprom_crc_buff[1], EEPROM_DATA_SIZE))
003907 940e 3ded 	CALL SUBOPT_0x4
003909 91a0 04e3 	LDS  R26,_i_temp_var
00390b 91b0 04e4 	LDS  R27,_i_temp_var+1
00390d 17ea      	CP   R30,R26
00390e 07fb      	CPC  R31,R27
00390f f4a9      	BRNE _0x14
                 ; 0000 00EB                 {
                 ; 0000 00EC                     write_eeprom_mem(DOWNLOAD_CMPLT_ADDR, 0x0000);
003910 940e 3df4 	CALL SUBOPT_0x5
003912 e0a0      	LDI  R26,LOW(0)
003913 d223      	RCALL _write_eeprom_mem
                 ; 0000 00ED 
                 ; 0000 00EE                     // Last update session not coplete
                 ; 0000 00EF                     loaded_data_size = 0x0000;
003914 940e 3df9 	CALL SUBOPT_0x6
                 ; 0000 00F0                     loaded_data_size = read_eeprom_mem(LAST_WR_PAGE_ADDR+1);
                 ; 0000 00F1                     loaded_data_size <<= 8;
                 ; 0000 00F2                     loaded_data_size |= read_eeprom_mem(LAST_WR_PAGE_ADDR);
                 ; 0000 00F3                     if(loaded_data_size != 0xFFFF)
003916 3faf      	CPI  R26,LOW(0xFFFF)
003917 efef      	LDI  R30,HIGH(0xFFFF)
003918 07be      	CPC  R27,R30
003919 f059      	BREQ _0x15
                 ; 0000 00F4                     {
                 ; 0000 00F5                         timer_1_stop();
00391a d17d      	RCALL _timer_1_stop
                 ; 0000 00F6                         page_counter = loaded_data_size / PAGESIZE;
00391b 940e 3e22 	CALL SUBOPT_0x7
00391d e8e0      	LDI  R30,LOW(128)
00391e e0f0      	LDI  R31,HIGH(128)
00391f 940e 3f40 	CALL __DIVW21U
003921 015f      	MOVW R10,R30
                 ; 0000 00F7                         new_state(ASK_FW_PKG);
003922 e0a1      	LDI  R26,LOW(1)
003923 d25a      	RCALL _new_state
                 ; 0000 00F8                         break;
003924 c158      	RJMP _0xF
                 ; 0000 00F9                     }//if
                 ; 0000 00FA                 }
                 _0x15:
                 ; 0000 00FB 
                 ; 0000 00FC                 while (timer_1_delay_cnt)
                 _0x14:
                 _0x16:
003925 940e 3dd9 	CALL SUBOPT_0x1
003927 f0b9      	BREQ _0x18
                 ; 0000 00FD                 {
                 ; 0000 00FE                     #asm("wdr")
003928 95a8      	wdr
                 ; 0000 00FF 
                 ; 0000 0100                     if (rx_counter0 == STD_PKG_SIZE)
003929 91a0 04e2 	LDS  R26,_rx_counter0
00392b 31ab      	CPI  R26,LOW(0x1B)
00392c f489      	BRNE _0x19
                 ; 0000 0101                     {
                 ; 0000 0102                         if(check_save_pkg(STD_PKG_SIZE) == DATA_OK)
00392d e1ab      	LDI  R26,LOW(27)
00392e e0b0      	LDI  R27,0
00392f d258      	RCALL _check_save_pkg
003930 30e0      	CPI  R30,0
003931 f461      	BRNE _0x1A
                 ; 0000 0103                         {
                 ; 0000 0104                             get_pkg_type();
003932 d311      	RCALL _get_pkg_type
                 ; 0000 0105                             if((last_pkg_type == PKG_FWV) || (last_pkg_type == PKG_FWL))
003933 91a0 04e5 	LDS  R26,_last_pkg_type
003935 30a7      	CPI  R26,LOW(0x7)
003936 f021      	BREQ _0x1C
003937 91a0 04e5 	LDS  R26,_last_pkg_type
003939 30a8      	CPI  R26,LOW(0x8)
00393a f419      	BRNE _0x1B
                 _0x1C:
                 ; 0000 0106                             {
                 ; 0000 0107                                 new_state(PARSE_START_PKG);
00393b e0a5      	LDI  R26,LOW(5)
00393c d241      	RCALL _new_state
                 ; 0000 0108                                 break;
00393d c001      	RJMP _0x18
                 ; 0000 0109                             }
                 ; 0000 010A                         }
                 _0x1B:
                 ; 0000 010B                     }
                 _0x1A:
                 ; 0000 010C                 }//while(timer delay)
                 _0x19:
00393e cfe6      	RJMP _0x16
                 _0x18:
                 ; 0000 010D                 timer_1_stop();
00393f d158      	RCALL _timer_1_stop
                 ; 0000 010E 
                 ; 0000 010F                 if(timer_1_delay_cnt == 0)
003940 940e 3dd9 	CALL SUBOPT_0x1
003942 f409      	BRNE _0x1E
                 ; 0000 0110                 {
                 ; 0000 0111                     exit_bootloader();
003943 d20c      	RCALL _exit_bootloader
                 ; 0000 0112                 }
                 ; 0000 0113                 break;
                 _0x1E:
003944 c138      	RJMP _0xF
                 ; 0000 0114 
                 ; 0000 0115             case WAIT_STD_PKG:
                 _0x10:
003945 30e3      	CPI  R30,LOW(0x3)
003946 f4c1      	BRNE _0x1F
                 ; 0000 0116                 if(timer_1_delay_cnt == 0)
003947 940e 3dd9 	CALL SUBOPT_0x1
003949 f409      	BRNE _0x20
                 ; 0000 0117                 {
                 ; 0000 0118                     exit_bootloader();
00394a d205      	RCALL _exit_bootloader
                 ; 0000 0119                 }
                 ; 0000 011A 
                 ; 0000 011B                 if (rx_counter0 == STD_PKG_SIZE)
                 _0x20:
00394b 91a0 04e2 	LDS  R26,_rx_counter0
00394d 31ab      	CPI  R26,LOW(0x1B)
00394e f431      	BRNE _0x21
                 ; 0000 011C                 {
                 ; 0000 011D                     if(check_save_pkg(STD_PKG_SIZE) == DATA_OK)
00394f e1ab      	LDI  R26,LOW(27)
003950 e0b0      	LDI  R27,0
003951 d236      	RCALL _check_save_pkg
003952 30e0      	CPI  R30,0
003953 f409      	BRNE _0x22
                 ; 0000 011E                     {
                 ; 0000 011F                         get_pkg_type();
003954 d2ef      	RCALL _get_pkg_type
                 ; 0000 0120                     }
                 ; 0000 0121                 }
                 _0x22:
                 ; 0000 0122 
                 ; 0000 0123                 switch (last_pkg_type)
                 _0x21:
003955 91e0 04e5 	LDS  R30,_last_pkg_type
                 ; 0000 0124                 {
                 ; 0000 0125                     case PKG_FWV:
003957 30e7      	CPI  R30,LOW(0x7)
003958 f011      	BREQ _0x27
                 ; 0000 0126                     case PKG_FWL:
003959 30e8      	CPI  R30,LOW(0x8)
00395a f419      	BRNE _0x29
                 _0x27:
                 ; 0000 0127                         timer_1_stop();
00395b d13c      	RCALL _timer_1_stop
                 ; 0000 0128                         new_state(PARSE_START_PKG);
00395c e0a5      	LDI  R26,LOW(5)
00395d d220      	RCALL _new_state
                 ; 0000 0129                         break;
                 ; 0000 012A 
                 ; 0000 012B                     default:
                 _0x29:
                 ; 0000 012C                         break;
                 ; 0000 012D                 }//switch
                 ; 0000 012E                 break;
00395e c11e      	RJMP _0xF
                 ; 0000 012F 
                 ; 0000 0130             case PARSE_START_PKG:
                 _0x1F:
00395f 30e5      	CPI  R30,LOW(0x5)
003960 f5e9      	BRNE _0x2A
                 ; 0000 0131                 if ( last_pkg_type == PKG_FWV )
003961 91a0 04e5 	LDS  R26,_last_pkg_type
003963 30a7      	CPI  R26,LOW(0x7)
003964 f459      	BRNE _0x2B
                 ; 0000 0132                 {
                 ; 0000 0133                     atoh( ((unsigned char *)data_buff)+DATA_START_BYTE, (unsigned char *)&i_temp_var, 4 );
003965 940e 3e27 	CALL SUBOPT_0x8
                 ; 0000 0134                     write_eeprom_mem(NEW_FW_VERSION_ADDR, (unsigned char)(i_temp_var>>8));
003967 e0e8      	LDI  R30,LOW(8)
003968 e0f0      	LDI  R31,HIGH(8)
003969 940e 3e33 	CALL SUBOPT_0x9
                 ; 0000 0135                     fw_version_saved = true;
00396b e0e1      	LDI  R30,LOW(1)
00396c 93e0 04e8 	STS  _fw_version_saved,R30
                 ; 0000 0136                     last_pkg_type = PKG_NULL;
00396e 940e 3e3a 	CALL SUBOPT_0xA
                 ; 0000 0137                     new_state(WAIT_STD_PKG);
                 ; 0000 0138                     timer_1_start(PKG_WAIT_TIMEOUT);
                 ; 0000 0139                 }
                 ; 0000 013A 
                 ; 0000 013B                 if( last_pkg_type == PKG_FWL )
                 _0x2B:
003970 91a0 04e5 	LDS  R26,_last_pkg_type
003972 30a8      	CPI  R26,LOW(0x8)
003973 f489      	BRNE _0x2C
                 ; 0000 013C                 {
                 ; 0000 013D                     atoh( ((unsigned char *)data_buff)+DATA_START_BYTE, (unsigned char *)&i_temp_var, 4 );
003974 940e 3e27 	CALL SUBOPT_0x8
                 ; 0000 013E                     write_eeprom_mem(FW_SIZE_ADDR, (unsigned char)(i_temp_var>>8));
003976 e0e3      	LDI  R30,LOW(3)
003977 e0f0      	LDI  R31,HIGH(3)
003978 940e 3e33 	CALL SUBOPT_0x9
                 ; 0000 013F                     write_eeprom_mem(FW_SIZE_ADDR+1, (unsigned char)i_temp_var);
00397a e0e4      	LDI  R30,LOW(4)
00397b e0f0      	LDI  R31,HIGH(4)
00397c 940e 3e44 	CALL SUBOPT_0xB
                 ; 0000 0140                     new_fw_size = 0x0000;
00397e 940e 3e4a 	CALL SUBOPT_0xC
                 ; 0000 0141                     new_fw_size = read_eeprom_mem(FW_SIZE_ADDR+1);
                 ; 0000 0142                     new_fw_size <<= 8;
                 ; 0000 0143                     new_fw_size |= read_eeprom_mem(FW_SIZE_ADDR);
                 ; 0000 0144                     fw_length_saved = true;
003980 e0e1      	LDI  R30,LOW(1)
003981 93e0 04e9 	STS  _fw_length_saved,R30
                 ; 0000 0145                     last_pkg_type = PKG_NULL;
003983 940e 3e3a 	CALL SUBOPT_0xA
                 ; 0000 0146                     new_state(WAIT_STD_PKG);
                 ; 0000 0147                     timer_1_start(PKG_WAIT_TIMEOUT);
                 ; 0000 0148                 }
                 ; 0000 0149 
                 ; 0000 014A                 // All startup data is recieved. Clear FW counter. Start download FW.
                 ; 0000 014B                 if ( fw_version_saved && fw_length_saved )
                 _0x2C:
003985 91e0 04e8 	LDS  R30,_fw_version_saved
003987 30e0      	CPI  R30,0
003988 f021      	BREQ _0x2E
003989 91e0 04e9 	LDS  R30,_fw_length_saved
00398b 30e0      	CPI  R30,0
00398c f409      	BRNE _0x2F
                 _0x2E:
00398d c00f      	RJMP _0x2D
                 _0x2F:
                 ; 0000 014C                 {
                 ; 0000 014D                     write_eeprom_mem(LAST_WR_PAGE_ADDR, 0x00);
00398e 940e 3e6f 	CALL SUBOPT_0xD
003990 e0a0      	LDI  R26,LOW(0)
003991 940e 3e74 	CALL SUBOPT_0xE
                 ; 0000 014E                     write_eeprom_mem(LAST_WR_PAGE_ADDR+1, 0x00);
003993 e0a0      	LDI  R26,LOW(0)
003994 d1a2      	RCALL _write_eeprom_mem
                 ; 0000 014F                     write_eeprom_mem(DOWNLOAD_CMPLT_ADDR, 0xFF);
003995 940e 3df4 	CALL SUBOPT_0x5
003997 efaf      	LDI  R26,LOW(255)
003998 d19e      	RCALL _write_eeprom_mem
                 ; 0000 0150                     page_counter = 0;
003999 24aa      	CLR  R10
00399a 24bb      	CLR  R11
                 ; 0000 0151 
                 ; 0000 0152                     new_state(ASK_FW_PKG);
00399b e0a1      	LDI  R26,LOW(1)
00399c d1e1      	RCALL _new_state
                 ; 0000 0153                 }
                 ; 0000 0154 
                 ; 0000 0155                 break;
                 _0x2D:
00399d c0df      	RJMP _0xF
                 ; 0000 0156 
                 ; 0000 0157             case ASK_FW_PKG:
                 _0x2A:
00399e 30e1      	CPI  R30,LOW(0x1)
00399f f4e9      	BRNE _0x30
                 ; 0000 0158                 // Request BIN data next from last writed page
                 ; 0000 0159                 loaded_data_size = 0x0000;
0039a0 940e 3df9 	CALL SUBOPT_0x6
                 ; 0000 015A                 loaded_data_size = read_eeprom_mem(LAST_WR_PAGE_ADDR+1);
                 ; 0000 015B                 loaded_data_size <<= 8;
                 ; 0000 015C                 loaded_data_size |= read_eeprom_mem(LAST_WR_PAGE_ADDR);
                 ; 0000 015D 
                 ; 0000 015E                 req_start_byte(loaded_data_size);
0039a2 d2d5      	RCALL _req_start_byte
                 ; 0000 015F 
                 ; 0000 0160                 new_fw_size = 0x0000;    // full data size
0039a3 940e 3e4a 	CALL SUBOPT_0xC
                 ; 0000 0161                 new_fw_size = read_eeprom_mem(FW_SIZE_ADDR+1);
                 ; 0000 0162                 new_fw_size <<= 8;
                 ; 0000 0163                 new_fw_size |= read_eeprom_mem(FW_SIZE_ADDR);
                 ; 0000 0164 
                 ; 0000 0165                 if( (new_fw_size - loaded_data_size) < PAGESIZE)
0039a5 940e 3e7b 	CALL SUBOPT_0xF
0039a7 38e0      	CPI  R30,LOW(0x80)
0039a8 e0a0      	LDI  R26,HIGH(0x80)
0039a9 07fa      	CPC  R31,R26
0039aa f438      	BRSH _0x31
                 ; 0000 0166                 {
                 ; 0000 0167                     last_pkg_size = new_fw_size - loaded_data_size;
0039ab 940e 3e7b 	CALL SUBOPT_0xF
0039ad 016f      	MOVW R12,R30
                 ; 0000 0168                     last_fw_part_flg = true;
0039ae e0e1      	LDI  R30,LOW(1)
0039af 93e0 04ea 	STS  _last_fw_part_flg,R30
                 ; 0000 0169                 }
                 ; 0000 016A                 else
0039b1 c003      	RJMP _0x32
                 _0x31:
                 ; 0000 016B                 {
                 ; 0000 016C                     last_pkg_size = PAGESIZE;
0039b2 e8e0      	LDI  R30,LOW(128)
0039b3 e0f0      	LDI  R31,HIGH(128)
0039b4 016f      	MOVW R12,R30
                 ; 0000 016D                 }
                 _0x32:
                 ; 0000 016E 
                 ; 0000 016F                 req_data_length(last_pkg_size);
0039b5 01d6      	MOVW R26,R12
0039b6 d307      	RCALL _req_data_length
                 ; 0000 0170 
                 ; 0000 0171                 timer_1_start(PKG_WAIT_TIMEOUT);
0039b7 e8a8      	LDI  R26,LOW(5000)
0039b8 e1b3      	LDI  R27,HIGH(5000)
0039b9 d0e4      	RCALL _timer_1_start
                 ; 0000 0172                 new_state(WAIT_BIN_DATA);
0039ba e0a4      	LDI  R26,LOW(4)
0039bb d1c2      	RCALL _new_state
                 ; 0000 0173                 break;
0039bc c0c0      	RJMP _0xF
                 ; 0000 0174 
                 ; 0000 0175             case WAIT_BIN_DATA:
                 _0x30:
0039bd 30e4      	CPI  R30,LOW(0x4)
0039be f501      	BRNE _0x33
                 ; 0000 0176                 if(timer_1_delay_cnt == 0)
0039bf 940e 3dd9 	CALL SUBOPT_0x1
0039c1 f409      	BRNE _0x34
                 ; 0000 0177                 {
                 ; 0000 0178                     exit_bootloader();
0039c2 d18d      	RCALL _exit_bootloader
                 ; 0000 0179                 }
                 ; 0000 017A 
                 ; 0000 017B                 last_pkg_type = PKG_NULL;
                 _0x34:
0039c3 e0e0      	LDI  R30,LOW(0)
0039c4 93e0 04e5 	STS  _last_pkg_type,R30
                 ; 0000 017C                 if (rx_counter0 == (last_pkg_size + SERVICE_DATA_SIZE))
0039c6 01f6      	MOVW R30,R12
0039c7 963f      	ADIW R30,15
0039c8 91a0 04e2 	LDS  R26,_rx_counter0
0039ca e0b0      	LDI  R27,0
0039cb 17ea      	CP   R30,R26
0039cc 07fb      	CPC  R31,R27
0039cd f431      	BRNE _0x35
                 ; 0000 017D                 {
                 ; 0000 017E                     if(check_save_pkg(last_pkg_size + SERVICE_DATA_SIZE) == DATA_OK)
0039ce 01d6      	MOVW R26,R12
0039cf 961f      	ADIW R26,15
0039d0 d1b7      	RCALL _check_save_pkg
0039d1 30e0      	CPI  R30,0
0039d2 f409      	BRNE _0x36
                 ; 0000 017F                     {
                 ; 0000 0180                         get_pkg_type();
0039d3 d270      	RCALL _get_pkg_type
                 ; 0000 0181                     }
                 ; 0000 0182                 }
                 _0x36:
                 ; 0000 0183 
                 ; 0000 0184                 if(last_pkg_type == PKG_BIN)
                 _0x35:
0039d4 91a0 04e5 	LDS  R26,_last_pkg_type
0039d6 30a5      	CPI  R26,LOW(0x5)
0039d7 f431      	BRNE _0x37
                 ; 0000 0185                 {
                 ; 0000 0186                     timer_1_stop();
0039d8 d0bf      	RCALL _timer_1_stop
                 ; 0000 0187                     last_pkg_type = PKG_NULL;
0039d9 e0e0      	LDI  R30,LOW(0)
0039da 93e0 04e5 	STS  _last_pkg_type,R30
                 ; 0000 0188                     new_state(UPD_DATA_BUFF);
0039dc e0ab      	LDI  R26,LOW(11)
0039dd d1a0      	RCALL _new_state
                 ; 0000 0189                 }
                 ; 0000 018A                 break;
                 _0x37:
0039de c09e      	RJMP _0xF
                 ; 0000 018B 
                 ; 0000 018C             case UPD_DATA_BUFF:
                 _0x33:
0039df 30eb      	CPI  R30,LOW(0xB)
0039e0 f009      	BREQ PC+2
0039e1 c042      	RJMP _0x38
                 ; 0000 018D                 address = page_counter * 0x40 + UPPER_FLASH_OFFSET;
0039e2 01f5      	MOVW R30,R10
0039e3 940e 3e83 	CALL SUBOPT_0x10
                 ; 0000 018E                 if (last_pkg_size < PAGESIZE)
0039e5 16ce      	CP   R12,R30
0039e6 06df      	CPC  R13,R31
0039e7 f478      	BRSH _0x39
                 ; 0000 018F                 {
                 ; 0000 0190                     for(loop_index = last_pkg_size; loop_index < PAGESIZE; loop_index++)
0039e8 0136      	MOVW R6,R12
                 _0x3B:
0039e9 e8e0      	LDI  R30,LOW(128)
0039ea e0f0      	LDI  R31,HIGH(128)
0039eb 166e      	CP   R6,R30
0039ec 067f      	CPC  R7,R31
0039ed f448      	BRSH _0x3C
                 ; 0000 0191                     {
                 ; 0000 0192                         ((unsigned char *)data_buff)[loop_index + DATA_START_BYTE] = 0xFF;
0039ee 01f3      	MOVW R30,R6
                +
0039ef 5ee4     +SUBI R30 , LOW ( - _data_buff - ( 10 ) )
0039f0 4ffc     +SBCI R31 , HIGH ( - _data_buff - ( 10 ) )
                 	__ADDW1MN _data_buff,10
0039f1 efaf      	LDI  R26,LOW(255)
0039f2 83a0      	STD  Z+0,R26
                 ; 0000 0193                     }
0039f3 01f3      	MOVW R30,R6
0039f4 9631      	ADIW R30,1
0039f5 013f      	MOVW R6,R30
0039f6 cff2      	RJMP _0x3B
                 _0x3C:
                 ; 0000 0194                 }
                 ; 0000 0195                 BlockLoad(PAGESIZE, (unsigned int *)((unsigned char *)(data_buff) + DATA_START_BYTE), 'F', &address);
                 _0x39:
0039f7 e8e0      	LDI  R30,LOW(128)
0039f8 e0f0      	LDI  R31,HIGH(128)
0039f9 93fa      	ST   -Y,R31
0039fa 93ea      	ST   -Y,R30
                +
0039fb e1ec     +LDI R30 , LOW ( _data_buff + ( 10 ) )
0039fc e0f3     +LDI R31 , HIGH ( _data_buff + ( 10 ) )
                 	__POINTW1MN _data_buff,10
0039fd 940e 3e8d 	CALL SUBOPT_0x11
0039ff d0b4      	RCALL _BlockLoad
                 ; 0000 0196 
                 ; 0000 0197                 last_pkg_size += loaded_data_size;
003a00 91e0 0448 	LDS  R30,_loaded_data_size
003a02 91f0 0449 	LDS  R31,_loaded_data_size+1
                +
003a04 0ece     +ADD R12 , R30
003a05 1edf     +ADC R13 , R31
                 	__ADDWRR 12,13,30,31
                 ; 0000 0198                 write_eeprom_mem(LAST_WR_PAGE_ADDR+1, (unsigned char)(last_pkg_size>>8));
003a06 e0e6      	LDI  R30,LOW(6)
003a07 e0f0      	LDI  R31,HIGH(6)
003a08 93fa      	ST   -Y,R31
003a09 93ea      	ST   -Y,R30
003a0a 2dad      	MOV  R26,R13
003a0b d12b      	RCALL _write_eeprom_mem
                 ; 0000 0199                 write_eeprom_mem(LAST_WR_PAGE_ADDR, (unsigned char)last_pkg_size);
003a0c 940e 3e6f 	CALL SUBOPT_0xD
003a0e 2dac      	MOV  R26,R12
003a0f d127      	RCALL _write_eeprom_mem
                 ; 0000 019A                 update_eeprom_crc();
003a10 d34f      	RCALL _update_eeprom_crc
                 ; 0000 019B 
                 ; 0000 019C                 page_counter++;
003a11 01f5      	MOVW R30,R10
003a12 9631      	ADIW R30,1
003a13 015f      	MOVW R10,R30
                 ; 0000 019D 
                 ; 0000 019E                 new_state(ASK_FW_PKG);
003a14 e0a1      	LDI  R26,LOW(1)
003a15 d168      	RCALL _new_state
                 ; 0000 019F                 if(last_fw_part_flg || (last_pkg_size == new_fw_size))
003a16 91e0 04ea 	LDS  R30,_last_fw_part_flg
003a18 30e0      	CPI  R30,0
003a19 f439      	BRNE _0x3E
003a1a 91e0 0446 	LDS  R30,_new_fw_size
003a1c 91f0 0447 	LDS  R31,_new_fw_size+1
003a1e 15ec      	CP   R30,R12
003a1f 05fd      	CPC  R31,R13
003a20 f411      	BRNE _0x3D
                 _0x3E:
                 ; 0000 01A0                 {
                 ; 0000 01A1                     new_state(UPD_FLASH);
003a21 e0ac      	LDI  R26,LOW(12)
003a22 d15b      	RCALL _new_state
                 ; 0000 01A2                 }
                 ; 0000 01A3                 break;
                 _0x3D:
003a23 c059      	RJMP _0xF
                 ; 0000 01A4 
                 ; 0000 01A5             case UPD_FLASH:
                 _0x38:
003a24 30ec      	CPI  R30,LOW(0xC)
003a25 f5a9      	BRNE _0x40
                 ; 0000 01A6                 for(loop_index = 0; loop_index < page_counter; loop_index++)
003a26 2466      	CLR  R6
003a27 2477      	CLR  R7
                 _0x42:
                +
003a28 146a     +CP R6 , R10
003a29 047b     +CPC R7 , R11
                 	__CPWRR 6,7,10,11
003a2a f498      	BRSH _0x43
                 ; 0000 01A7                 {
                 ; 0000 01A8                     address = loop_index * 0x40 + UPPER_FLASH_OFFSET;
003a2b 01f3      	MOVW R30,R6
003a2c 940e 3e83 	CALL SUBOPT_0x10
                 ; 0000 01A9                     BlockRead(PAGESIZE, data_buff, 'F', &address);
003a2e 940e 3e94 	CALL SUBOPT_0x12
003a30 d0cc      	RCALL _BlockRead
                 ; 0000 01AA                     address -= UPPER_FLASH_OFFSET;
003a31 e0e0      	LDI  R30,LOW(7168)
003a32 e1fc      	LDI  R31,HIGH(7168)
                +
003a33 1a4e     +SUB R4 , R30
003a34 0a5f     +SBC R5 , R31
                 	__SUBWRR 4,5,30,31
                 ; 0000 01AB                     BlockLoad(PAGESIZE, data_buff, 'F', &address);
003a35 e8e0      	LDI  R30,LOW(128)
003a36 e0f0      	LDI  R31,HIGH(128)
003a37 940e 3e94 	CALL SUBOPT_0x12
003a39 d07a      	RCALL _BlockLoad
                 ; 0000 01AC                 }
003a3a 01f3      	MOVW R30,R6
003a3b 9631      	ADIW R30,1
003a3c 013f      	MOVW R6,R30
003a3d cfea      	RJMP _0x42
                 _0x43:
                 ; 0000 01AD                 // Update FW version in EEPROM
                 ; 0000 01AE                 write_eeprom_mem(FW_VERSION_ADDR, read_eeprom_mem(NEW_FW_VERSION_ADDR));
003a3e e0e2      	LDI  R30,LOW(2)
003a3f e0f0      	LDI  R31,HIGH(2)
003a40 93fa      	ST   -Y,R31
003a41 93ea      	ST   -Y,R30
003a42 e0a8      	LDI  R26,LOW(8)
003a43 e0b0      	LDI  R27,0
003a44 d100      	RCALL _read_eeprom_mem
003a45 2fae      	MOV  R26,R30
003a46 d0f0      	RCALL _write_eeprom_mem
                 ; 0000 01AF                 // Set "update successful" flag in EEPROM
                 ; 0000 01B0                 write_eeprom_mem(DOWNLOAD_CMPLT_ADDR, 0x01);
003a47 940e 3df4 	CALL SUBOPT_0x5
003a49 e0a1      	LDI  R26,LOW(1)
003a4a d0ec      	RCALL _write_eeprom_mem
                 ; 0000 01B1                 // Reset loaded data counter in EEPROM
                 ; 0000 01B2                 write_eeprom_mem(LAST_WR_PAGE_ADDR, 0xFF);
003a4b 940e 3e6f 	CALL SUBOPT_0xD
003a4d efaf      	LDI  R26,LOW(255)
003a4e 940e 3e74 	CALL SUBOPT_0xE
                 ; 0000 01B3                 write_eeprom_mem(LAST_WR_PAGE_ADDR+1, 0xFF);
003a50 efaf      	LDI  R26,LOW(255)
003a51 d0e5      	RCALL _write_eeprom_mem
                 ; 0000 01B4                 // Send update result to host
                 ; 0000 01B5                 send_upgd_result((unsigned int)read_eeprom_mem(DOWNLOAD_CMPLT_ADDR));
003a52 e0a7      	LDI  R26,LOW(7)
003a53 e0b0      	LDI  R27,0
003a54 d0f0      	RCALL _read_eeprom_mem
003a55 e0f0      	LDI  R31,0
003a56 01df      	MOVW R26,R30
003a57 d2ab      	RCALL _send_upgd_result
                 ; 0000 01B6 
                 ; 0000 01B7                 new_state(ERASE_UNUSE_PAGES);
003a58 e0ad      	LDI  R26,LOW(13)
003a59 d124      	RCALL _new_state
                 ; 0000 01B8                 break;
003a5a c022      	RJMP _0xF
                 ; 0000 01B9 
                 ; 0000 01BA             case ERASE_UNUSE_PAGES:
                 _0x40:
003a5b 30ed      	CPI  R30,LOW(0xD)
003a5c f4e9      	BRNE _0x44
                 ; 0000 01BB                 for(loop_index = page_counter; loop_index < NUM_OF_PAGES; loop_index++)
003a5d 0135      	MOVW R6,R10
                 _0x46:
003a5e eee0      	LDI  R30,LOW(224)
003a5f e0f0      	LDI  R31,HIGH(224)
003a60 166e      	CP   R6,R30
003a61 067f      	CPC  R7,R31
003a62 f4a0      	BRSH _0x47
                 ; 0000 01BC                 {
                 ; 0000 01BD                     _WAIT_FOR_SPM();
                 _0x48:
003a63 b7e7      	IN   R30,0x37
003a64 fde0      	SBRC R30,0
003a65 cffd      	RJMP _0x48
                 ; 0000 01BE                     address = (loop_index * 0x40) << 1;
003a66 01f3      	MOVW R30,R6
003a67 940e 3f3b 	CALL __LSLW2
003a69 940e 3f37 	CALL __LSLW4
003a6b 0fee      	LSL  R30
003a6c 1fff      	ROL  R31
003a6d 012f      	MOVW R4,R30
                 ; 0000 01BF                     _PAGE_ERASE(address);
003a6e 925a      	ST   -Y,R5
003a6f 924a      	ST   -Y,R4
003a70 e0a3      	LDI  R26,LOW(3)
003a71 940e 3d94 	CALL ___AddrToZByteToSPMCR_SPM
                 ; 0000 01C0                 }
003a73 01f3      	MOVW R30,R6
003a74 9631      	ADIW R30,1
003a75 013f      	MOVW R6,R30
003a76 cfe7      	RJMP _0x46
                 _0x47:
                 ; 0000 01C1 
                 ; 0000 01C2                 new_state(EXIT_BOOT);
003a77 e0af      	LDI  R26,LOW(15)
003a78 d105      	RCALL _new_state
                 ; 0000 01C3                 break;
003a79 c003      	RJMP _0xF
                 ; 0000 01C4 
                 ; 0000 01C5             case EXIT_BOOT:
                 _0x44:
003a7a 30ef      	CPI  R30,LOW(0xF)
003a7b f409      	BRNE _0x4B
                 ; 0000 01C6                 exit_bootloader();
003a7c d0d3      	RCALL _exit_bootloader
                 ; 0000 01C7                 break;
                 ; 0000 01C8 
                 ; 0000 01C9             case IDLE:
                 _0x4B:
                 ; 0000 01CA             default:
                 ; 0000 01CB                 break;
                 ; 0000 01CC         }//switch (state machine)
                 _0xF:
                 ; 0000 01CD 
                 ; 0000 01CE     }//while(1)
003a7d ce5d      	RJMP _0xA
                 ; 0000 01CF }//main()
                 _0x4E:
003a7e cfff      	RJMP _0x4E
                 ; .FEND
                 ;
                 ;//------------------------------------- FUNCTIONS -----------------------------
                 ;/**
                 ; * @brief Hardware initialisation.
                 ; *
                 ; * USART 115200
                 ; * TC1 - timer period 100 ms, in ISR decrement startup_delay_cnt.
                 ; * WDT period 8 sec.
                 ; *
                 ; */
                 ;void startup_init(void)
                 ; 0000 01DB {
                 _startup_init:
                 ; .FSTART _startup_init
                 ; 0000 01DC     // USART initialization
                 ; 0000 01DD     // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0000 01DE     // USART Receiver: On
                 ; 0000 01DF     // USART Transmitter: On
                 ; 0000 01E0     // USART0 Mode: Asynchronous
                 ; 0000 01E1     // USART Baud Rate: 115200
                 ; 0000 01E2     UCSR0A=(0<<RXC0) | (0<<TXC0) | (0<<UDRE0) | (0<<FE0) | (0<<DOR0) | (0<<UPE0) | (0<<U2X0) | (0<<MPCM0);
003a7f e0e0      	LDI  R30,LOW(0)
003a80 93e0 00c0 	STS  192,R30
                 ; 0000 01E3     UCSR0B=(1<<RXCIE0) | (0<<TXCIE0) | (0<<UDRIE0) | (1<<RXEN0) | (1<<TXEN0) | (0<<UCSZ02) | (0<<RXB80) | (0<<TXB80);
003a82 e9e8      	LDI  R30,LOW(152)
003a83 93e0 00c1 	STS  193,R30
                 ; 0000 01E4     UCSR0C=(0<<UMSEL01) | (0<<UMSEL00) | (0<<UPM01) | (0<<UPM00) | (0<<USBS0) | (1<<UCSZ01) | (1<<UCSZ00) | (0<<UCPOL0);
003a85 e0e6      	LDI  R30,LOW(6)
003a86 93e0 00c2 	STS  194,R30
                 ; 0000 01E5     UBRR0H=0x00;
003a88 e0e0      	LDI  R30,LOW(0)
003a89 93e0 00c5 	STS  197,R30
                 ; 0000 01E6     UBRR0L=0x03;
003a8b e0e3      	LDI  R30,LOW(3)
003a8c 93e0 00c4 	STS  196,R30
                 ; 0000 01E7 
                 ; 0000 01E8     // Timer/Counter 1 initialization
                 ; 0000 01E9     // Clock source: System Clock
                 ; 0000 01EA     // Clock divisor: 64
                 ; 0000 01EB     // Mode: Normal top=0xFFFF
                 ; 0000 01EC     // Timer Period: 100 ms
                 ; 0000 01ED     // Timer1 Overflow Interrupt: On
                 ; 0000 01EE     TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
003a8e e0e0      	LDI  R30,LOW(0)
003a8f 93e0 0080 	STS  128,R30
                 ; 0000 01EF     // TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (1<<CS11) | (1<<CS10);
                 ; 0000 01F0     // TCNT1H=TIMER1_CNT_INIT >> 8;
                 ; 0000 01F1     // TCNT1L=TIMER1_CNT_INIT & 0xFF;
                 ; 0000 01F2 
                 ; 0000 01F3     // Timer/Counter 1 Interrupt(s) initialization
                 ; 0000 01F4     // TIMSK1=(0<<ICIE1) | (0<<OCIE1B) | (0<<OCIE1A) | (1<<TOIE1);
                 ; 0000 01F5 
                 ; 0000 01F6     // Watchdog Timer initialization
                 ; 0000 01F7     // Watchdog Timer Prescaler: OSC/1024k
                 ; 0000 01F8     // Watchdog timeout action: Reset
                 ; 0000 01F9     #pragma optsize-
                 ; 0000 01FA     WDTCSR=(0<<WDIF) | (0<<WDIE) | (1<<WDP3) | (1<<WDCE) | (1<<WDE) | (0<<WDP2) | (0<<WDP1) | (1<<WDP0);
003a91 e3e9      	LDI  R30,LOW(57)
003a92 93e0 0060 	STS  96,R30
                 ; 0000 01FB     WDTCSR=(0<<WDIF) | (0<<WDIE) | (1<<WDP3) | (0<<WDCE) | (1<<WDE) | (0<<WDP2) | (0<<WDP1) | (1<<WDP0);
003a94 e2e9      	LDI  R30,LOW(41)
003a95 93e0 0060 	STS  96,R30
                 ; 0000 01FC     #ifdef _OPTIMIZE_SIZE_
                 ; 0000 01FD     #pragma optsize+
                 ; 0000 01FE     #endif
                 ; 0000 01FF }//startup_ini()
003a97 9508      	RET
                 ; .FEND
                 ;//-----------------------------------------------------------------------------
                 ;/**
                 ; * @brief TC1 stop, turn off before out from boot section.
                 ; *
                 ; */
                 ;void timer_1_stop()
                 ; 0000 0206 {
                 _timer_1_stop:
                 ; .FSTART _timer_1_stop
                 ; 0000 0207     TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
003a98 e0e0      	LDI  R30,LOW(0)
003a99 93e0 0081 	STS  129,R30
                 ; 0000 0208     TIMSK1=(0<<ICIE1) | (0<<OCIE1B) | (0<<OCIE1A) | (0<<TOIE1);
003a9b 93e0 006f 	STS  111,R30
                 ; 0000 0209 }//timer_1_stop()
003a9d 9508      	RET
                 ; .FEND
                 ;//-----------------------------------------------------------------------------
                 ;/**
                 ; * @brief Load delay conter and start timer 1.
                 ; *
                 ; * @param time_ms - Timer delay in ms (counts only in hundreds ms).
                 ; */
                 ;void timer_1_start(unsigned int time_ms)
                 ; 0000 0211 {
                 _timer_1_start:
                 ; .FSTART _timer_1_start
                 ; 0000 0212     timer_1_delay_cnt = time_ms / 100; //convert to timer 1 overflow periods
003a9e 93ba      	ST   -Y,R27
003a9f 93aa      	ST   -Y,R26
                 ;	time_ms -> Y+0
003aa0 81a8      	LD   R26,Y
003aa1 81b9      	LDD  R27,Y+1
003aa2 e6e4      	LDI  R30,LOW(100)
003aa3 e0f0      	LDI  R31,HIGH(100)
003aa4 940e 3f40 	CALL __DIVW21U
003aa6 93e0 0300 	STS  _timer_1_delay_cnt,R30
003aa8 93f0 0301 	STS  _timer_1_delay_cnt+1,R31
                 ; 0000 0213 
                 ; 0000 0214     TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (1<<CS11) | (1<<CS10);
003aaa e0e3      	LDI  R30,LOW(3)
003aab 93e0 0081 	STS  129,R30
                 ; 0000 0215     TCNT1H=TIMER1_CNT_INIT >> 8;
003aad 940e 3dd2 	CALL SUBOPT_0x0
                 ; 0000 0216     TCNT1L=TIMER1_CNT_INIT & 0xFF;
                 ; 0000 0217 
                 ; 0000 0218     TIMSK1=(0<<ICIE1) | (0<<OCIE1B) | (0<<OCIE1A) | (1<<TOIE1);
003aaf e0e1      	LDI  R30,LOW(1)
003ab0 93e0 006f 	STS  111,R30
                 ; 0000 0219 }//timer_1_start()
003ab2 940c 3d88 	JMP  _0x2060003
                 ; .FEND
                 ;//-----------------------------------------------------------------------------
                 ;/**
                 ; * @brief Write data buffer in FLASH or EEPROM memory.
                 ; *
                 ; * For flash: load data buffer in temp area and write page from address.
                 ; *
                 ; * For eeprom: write num of size data (in bytes) in eeprom from address.
                 ; *
                 ; *
                 ; * @param size sizo of writing data (in bytes).
                 ; * @param p_data_buff pointer to data buffer.
                 ; * @param mem_type type of writing memory.
                 ; * @param address start memory address. For EEPROM in bytes. For FLASH in words.
                 ; * @return unsigned char. [error code]
                 ; */
                 ;unsigned char BlockLoad(unsigned int size, unsigned int * p_data_buff, unsigned char mem_type, ADDR_t *address)
                 ; 0000 022A {
                 _BlockLoad:
                 ; .FSTART _BlockLoad
                 ; 0000 022B     ADDR_t temp_addr;
                 ; 0000 022C     ADDR_t inc_addr;
                 ; 0000 022D     unsigned int index = 0;
                 ; 0000 022E     unsigned int data_size;
                 ; 0000 022F 
                 ; 0000 0230 //vvv============== FOR REDUCE PROG SIZE
                 ; 0000 0231     // EEPROM memory type.
                 ; 0000 0232     // if(mem_type == 'E')
                 ; 0000 0233     // {
                 ; 0000 0234     //     temp_addr = *address;
                 ; 0000 0235     //     data_size = size;
                 ; 0000 0236     //     if((temp_addr + data_size) > EEPROM_END) // Check enough EEPROM memory
                 ; 0000 0237     //     {
                 ; 0000 0238     //         return 1;
                 ; 0000 0239     //     }
                 ; 0000 023A     //     // Then program the EEPROM
                 ; 0000 023B     //     for(index = 0; index < size; index++)
                 ; 0000 023C     //     {
                 ; 0000 023D     //         _WAIT_FOR_SPM();
                 ; 0000 023E     //         *((eeprom unsigned char *) temp_addr++) = ((unsigned char *) p_data_buff)[index]; // Write byte.
                 ; 0000 023F     //     }
                 ; 0000 0240 
                 ; 0000 0241     //     return 0;
                 ; 0000 0242     // }//EEPROM
                 ; 0000 0243 //^^^============== FOR REDUCE PROG SIZE
                 ; 0000 0244 
                 ; 0000 0245     // Flash memory type.
                 ; 0000 0246     if(mem_type == 'F')
003ab4 93ba      	ST   -Y,R27
003ab5 93aa      	ST   -Y,R26
003ab6 9722      	SBIW R28,2
003ab7 940e 3f74 	CALL __SAVELOCR6
                 ;	size -> Y+13
                 ;	*p_data_buff -> Y+11
                 ;	mem_type -> Y+10
                 ;	*address -> Y+8
                 ;	temp_addr -> R16,R17
                 ;	inc_addr -> R18,R19
                 ;	index -> R20,R21
                 ;	data_size -> Y+6
                +
003ab9 e040     +LDI R20 , LOW ( 0 )
003aba e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
003abb 85aa      	LDD  R26,Y+10
003abc 34a6      	CPI  R26,LOW(0x46)
003abd f5d1      	BRNE _0x4F
                 ; 0000 0247     { // NOTE: For flash programming, 'address' is given in words.
                 ; 0000 0248         temp_addr = *address << 1; //Convert word-address to byte-address
003abe 940e 3e99 	CALL SUBOPT_0x13
003ac0 018f      	MOVW R16,R30
                 ; 0000 0249         inc_addr = *address << 1; //Convert word-address to byte-address
003ac1 940e 3e99 	CALL SUBOPT_0x13
003ac3 019f      	MOVW R18,R30
                 ; 0000 024A         _PAGE_ERASE(temp_addr);
003ac4 931a      	ST   -Y,R17
003ac5 930a      	ST   -Y,R16
003ac6 e0a3      	LDI  R26,LOW(3)
003ac7 940e 3d94 	CALL ___AddrToZByteToSPMCR_SPM
                 ; 0000 024B         data_size = size >> 1; //Convert to words
003ac9 85ed      	LDD  R30,Y+13
003aca 85fe      	LDD  R31,Y+13+1
003acb 95f6      	LSR  R31
003acc 95e7      	ROR  R30
003acd 83ee      	STD  Y+6,R30
003ace 83ff      	STD  Y+6+1,R31
                 ; 0000 024C 
                 ; 0000 024D         for(index = 0; index < data_size; index++)
                +
003acf e040     +LDI R20 , LOW ( 0 )
003ad0 e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
                 _0x51:
003ad1 81ee      	LDD  R30,Y+6
003ad2 81ff      	LDD  R31,Y+6+1
003ad3 174e      	CP   R20,R30
003ad4 075f      	CPC  R21,R31
003ad5 f4c0      	BRSH _0x52
                 ; 0000 024E         {
                 ; 0000 024F             _WAIT_FOR_SPM();
                 _0x53:
003ad6 b7e7      	IN   R30,0x37
003ad7 fde0      	SBRC R30,0
003ad8 cffd      	RJMP _0x53
                 ; 0000 0250             _FILL_TEMP_WORD(inc_addr, ((unsigned int *) p_data_buff)[index]);
003ad9 933a      	ST   -Y,R19
003ada 932a      	ST   -Y,R18
003adb 01fa      	MOVW R30,R20
003adc 85ad      	LDD  R26,Y+13
003add 85be      	LDD  R27,Y+13+1
003ade 0fee      	LSL  R30
003adf 1fff      	ROL  R31
003ae0 0fae      	ADD  R26,R30
003ae1 1fbf      	ADC  R27,R31
003ae2 940e 3f53 	CALL __GETW1P
003ae4 93fa      	ST   -Y,R31
003ae5 93ea      	ST   -Y,R30
003ae6 e0a1      	LDI  R26,LOW(1)
003ae7 940e 3d8a 	CALL ___AddrToZWordToR1R0ByteToSPMCR_SPM
                 ; 0000 0251             inc_addr += 2;
                +
003ae9 5f2e     +SUBI R18 , LOW ( - 2 )
003aea 4f3f     +SBCI R19 , HIGH ( - 2 )
                 	__ADDWRN 18,19,2
                 ; 0000 0252         }// Loop until all words written.
                +
003aeb 5f4f     +SUBI R20 , LOW ( - 1 )
003aec 4f5f     +SBCI R21 , HIGH ( - 1 )
                 	__ADDWRN 20,21,1
003aed cfe3      	RJMP _0x51
                 _0x52:
                 ; 0000 0253 
                 ; 0000 0254         _PAGE_WRITE(temp_addr);
003aee 931a      	ST   -Y,R17
003aef 930a      	ST   -Y,R16
003af0 e0a5      	LDI  R26,LOW(5)
003af1 940e 3d94 	CALL ___AddrToZByteToSPMCR_SPM
                 ; 0000 0255         _WAIT_FOR_SPM();
                 _0x56:
003af3 b7e7      	IN   R30,0x37
003af4 fde0      	SBRC R30,0
003af5 cffd      	RJMP _0x56
                 ; 0000 0256         _ENABLE_RWW_SECTION();
003af6 940e 3ea0 	CALL SUBOPT_0x14
                 ; 0000 0257 
                 ; 0000 0258         return 0;
                 ; 0000 0259     }//FLASH
                 ; 0000 025A 
                 ; 0000 025B     return 0;
                 _0x4F:
                 _0x2060006:
003af8 e0e0      	LDI  R30,LOW(0)
003af9 940e 3f7b 	CALL __LOADLOCR6
003afb 962f      	ADIW R28,15
003afc 9508      	RET
                 ; 0000 025C }//BlockLoad()
                 ; .FEND
                 ;//-----------------------------------------------------------------------------
                 ;/**
                 ; * @brief Read block data from EEPROM or FLASH.
                 ; *
                 ; * For flash: load size data from (address) to buffer.
                 ; *
                 ; * For eeprom: read num of size eeprom data (in bytes) from address.
                 ; *
                 ; * @param size size of reading data (in bytes).
                 ; * @param p_data_buff pointer to data buffer.
                 ; * @param mem_type type of reading memory. 'E' - EEPROM. 'F' - FLASH.
                 ; * @param address start memory address. For EEPROM in bytes. For FLASH in words.
                 ; * @return unsigned char. [TODO: error code]
                 ; */
                 ;unsigned char BlockRead(unsigned int size, unsigned int * p_data_buff, unsigned char mem_type, ADDR_t *address)
                 ; 0000 026C {
                 _BlockRead:
                 ; .FSTART _BlockRead
                 ; 0000 026D     ADDR_t temp_addr = *address;
                 ; 0000 026E     unsigned int index = 0;
                 ; 0000 026F     unsigned int data_size;
                 ; 0000 0270 
                 ; 0000 0271 //vvv============== FOR REDUCE PROG SIZE
                 ; 0000 0272     // EEPROM memory type.
                 ; 0000 0273     // if(mem_type == 'E')
                 ; 0000 0274     // {
                 ; 0000 0275     //     data_size = size;
                 ; 0000 0276     //     for(index = 0; index < data_size; index++)
                 ; 0000 0277     //     {
                 ; 0000 0278     //         _WAIT_FOR_SPM();
                 ; 0000 0279     //         ((unsigned char *) p_data_buff)[index] = (*((eeprom unsigned char *) temp_addr++));
                 ; 0000 027A     //     }
                 ; 0000 027B 
                 ; 0000 027C     //     return 0;
                 ; 0000 027D     // }//EEPROM
                 ; 0000 027E //^^^============== FOR REDUCE PROG SIZE
                 ; 0000 027F 
                 ; 0000 0280     // Flash memory type.
                 ; 0000 0281     if(mem_type == 'F')
003afd 93ba      	ST   -Y,R27
003afe 93aa      	ST   -Y,R26
003aff 940e 3f74 	CALL __SAVELOCR6
                 ;	size -> Y+11
                 ;	*p_data_buff -> Y+9
                 ;	mem_type -> Y+8
                 ;	*address -> Y+6
                 ;	temp_addr -> R16,R17
                 ;	index -> R18,R19
                 ;	data_size -> R20,R21
003b01 81ae      	LDD  R26,Y+6
003b02 81bf      	LDD  R27,Y+6+1
003b03 940e 3f53 	CALL __GETW1P
003b05 018f      	MOVW R16,R30
                +
003b06 e020     +LDI R18 , LOW ( 0 )
003b07 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
003b08 85a8      	LDD  R26,Y+8
003b09 34a6      	CPI  R26,LOW(0x46)
003b0a f539      	BRNE _0x59
                 ; 0000 0282     {
                 ; 0000 0283         temp_addr <<= 1; // Convert address to bytes.
003b0b 0f00      	LSL  R16
003b0c 1f11      	ROL  R17
                 ; 0000 0284         data_size = size;
                +
003b0d 854b     +LDD R20 , Y + 11
003b0e 855c     +LDD R21 , Y + 11 + 1
                 	__GETWRS 20,21,11
                 ; 0000 0285         for(index = 0; index < data_size; index += 2)
                +
003b0f e020     +LDI R18 , LOW ( 0 )
003b10 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0x5B:
                +
003b11 1724     +CP R18 , R20
003b12 0735     +CPC R19 , R21
                 	__CPWRR 18,19,20,21
003b13 f4e0      	BRSH _0x5C
                 ; 0000 0286         {
                 ; 0000 0287             _WAIT_FOR_SPM();
                 _0x5D:
003b14 b7e7      	IN   R30,0x37
003b15 fde0      	SBRC R30,0
003b16 cffd      	RJMP _0x5D
                 ; 0000 0288             _ENABLE_RWW_SECTION();
003b17 940e 3ea0 	CALL SUBOPT_0x14
                 ; 0000 0289             ((unsigned char *) p_data_buff)[index] = _LOAD_PROGRAM_MEMORY(temp_addr);
003b19 01f9      	MOVW R30,R18
003b1a 85a9      	LDD  R26,Y+9
003b1b 85ba      	LDD  R27,Y+9+1
003b1c 0fae      	ADD  R26,R30
003b1d 1fbf      	ADC  R27,R31
003b1e 01f8      	MOVW R30,R16
003b1f 91e4      	LPM  R30,Z
003b20 93ec      	ST   X,R30
                 ; 0000 028A             ((unsigned char *) p_data_buff)[index + 1] = _LOAD_PROGRAM_MEMORY(temp_addr + 1);
003b21 01f9      	MOVW R30,R18
003b22 9631      	ADIW R30,1
003b23 85a9      	LDD  R26,Y+9
003b24 85ba      	LDD  R27,Y+9+1
003b25 0fae      	ADD  R26,R30
003b26 1fbf      	ADC  R27,R31
003b27 01f8      	MOVW R30,R16
003b28 9631      	ADIW R30,1
003b29 91e4      	LPM  R30,Z
003b2a 93ec      	ST   X,R30
                 ; 0000 028B             temp_addr += 2;
                +
003b2b 5f0e     +SUBI R16 , LOW ( - 2 )
003b2c 4f1f     +SBCI R17 , HIGH ( - 2 )
                 	__ADDWRN 16,17,2
                 ; 0000 028C         }
                +
003b2d 5f2e     +SUBI R18 , LOW ( - 2 )
003b2e 4f3f     +SBCI R19 , HIGH ( - 2 )
                 	__ADDWRN 18,19,2
003b2f cfe1      	RJMP _0x5B
                 _0x5C:
                 ; 0000 028D 
                 ; 0000 028E         return 0;
003b30 e0e0      	LDI  R30,LOW(0)
003b31 c001      	RJMP _0x2060005
                 ; 0000 028F     }//FLASH
                 ; 0000 0290     return 1; //invalid memory type
                 _0x59:
003b32 e0e1      	LDI  R30,LOW(1)
                 _0x2060005:
003b33 940e 3f7b 	CALL __LOADLOCR6
003b35 962d      	ADIW R28,13
003b36 9508      	RET
                 ; 0000 0291 }//BlockRead()
                 ; .FEND
                 ;//-----------------------------------------------------------------------------
                 ;/**
                 ; * @brief Erase chip before write new data.
                 ; *
                 ; * @return char. [TODO: error code]
                 ; */
                 ;char chip_erase(void)
                 ; 0000 0299 {
                 ; 0000 029A     for(address = 0; address < APP_END; address += PAGESIZE)
                 ; 0000 029B     { // NOTE: Here we use address as a byte-address, not word-address, for convenience.
                 ; 0000 029C         _WAIT_FOR_SPM();
                 ; 0000 029D         _PAGE_ERASE( address );
                 ; 0000 029E     }
                 ; 0000 029F 
                 ; 0000 02A0     return 0;
                 ; 0000 02A1 }//chip_erase()
                 ;//-----------------------------------------------------------------------------
                 ;/**
                 ; * @brief Read one word from FLASH.
                 ; *
                 ; * @param addr data address in words.
                 ; * @return unsigned int.
                 ;*/
                 ;unsigned int read_prog_mem(ADDR_t addr)
                 ; 0000 02AA {
                 ; 0000 02AB     unsigned int temp_data = 0x0000;
                 ; 0000 02AC     ADDR_t temp_addr;
                 ; 0000 02AD 
                 ; 0000 02AE     temp_addr = addr;
                 ;	addr -> Y+4
                 ;	temp_data -> R16,R17
                 ;	temp_addr -> R18,R19
                 ; 0000 02AF 
                 ; 0000 02B0     _WAIT_FOR_SPM();
                 ; 0000 02B1     _ENABLE_RWW_SECTION();
                 ; 0000 02B2     ((unsigned char *) &temp_data)[1] = _LOAD_PROGRAM_MEMORY((temp_addr << 1) + 1 );
                 ; 0000 02B3     ((unsigned char *) &temp_data)[0] = _LOAD_PROGRAM_MEMORY((temp_addr << 1) + 0 );
                 ; 0000 02B4 
                 ; 0000 02B5     return temp_data;
                 ; 0000 02B6 }//read_prog_mem()
                 ;//-----------------------------------------------------------------------------
                 ;/**
                 ; * @brief Load one word of data to temp buffer before write to flash page.
                 ; *
                 ; * @param addr Address of data in words.
                 ; * @param data Word of data for load.
                 ; * @return char [TODO: error code]
                 ; */
                 ;char write_prog_mem(ADDR_t addr, unsigned int data)
                 ; 0000 02C0 {
                 ; 0000 02C1     ADDR_t temp_addr;
                 ; 0000 02C2     unsigned int temp_data;
                 ; 0000 02C3 
                 ; 0000 02C4     temp_addr = addr << 1; //Convert word-address to byte-address
                 ;	addr -> Y+6
                 ;	data -> Y+4
                 ;	temp_addr -> R16,R17
                 ;	temp_data -> R18,R19
                 ; 0000 02C5     temp_data = data;
                 ; 0000 02C6 
                 ; 0000 02C7     _WAIT_FOR_SPM();
                 ; 0000 02C8     _FILL_TEMP_WORD(temp_addr, temp_data);
                 ; 0000 02C9 
                 ; 0000 02CA     return 0;
                 ; 0000 02CB }//write_prog_mem()
                 ;//-----------------------------------------------------------------------------
                 ;/**
                 ; * @brief Write data from temp buffer to flash page.
                 ; *
                 ; * Call after load data via function write_prog_mem().
                 ; *
                 ; * @param addr address of page in words.
                 ; * @return char [TODO: error code]
                 ; */
                 ;char write_page(ADDR_t addr)
                 ; 0000 02D6 {
                 ; 0000 02D7     ADDR_t temp_addr;
                 ; 0000 02D8 
                 ; 0000 02D9     temp_addr = addr << 1 ; // Convert word-address to byte-address
                 ;	addr -> Y+2
                 ;	temp_addr -> R16,R17
                 ; 0000 02DA 
                 ; 0000 02DB     if( temp_addr >= (APP_END>>1) ) // Protect bootloader area.
                 ; 0000 02DC     {
                 ; 0000 02DD         return 1;
                 ; 0000 02DE     }
                 ; 0000 02DF     else
                 ; 0000 02E0     {
                 ; 0000 02E1         _WAIT_FOR_SPM();
                 ; 0000 02E2         _PAGE_WRITE( temp_addr );
                 ; 0000 02E3     }
                 ; 0000 02E4 
                 ; 0000 02E5     return 0;
                 ; 0000 02E6 }//write_page()
                 ;//-----------------------------------------------------------------------------
                 ;/**
                 ; * @brief Write one byte of data to EEPROM.
                 ; *
                 ; * @param addr Address of byte in EEPROM.
                 ; * @param data Byte of data to be written.
                 ; * @return char [TODO: error code]
                 ; */
                 ;char write_eeprom_mem(ADDR_t addr, unsigned char data)
                 ; 0000 02F0 {
                 _write_eeprom_mem:
                 ; .FSTART _write_eeprom_mem
                 ; 0000 02F1     _WAIT_FOR_SPM();
003b37 93aa      	ST   -Y,R26
                 ;	addr -> Y+1
                 ;	data -> Y+0
                 _0x71:
003b38 b7e7      	IN   R30,0x37
003b39 fde0      	SBRC R30,0
003b3a cffd      	RJMP _0x71
                 ; 0000 02F2     *((eeprom unsigned char *) addr) = data;
003b3b 81e8      	LD   R30,Y
003b3c 81a9      	LDD  R26,Y+1
003b3d 81ba      	LDD  R27,Y+1+1
003b3e 940e 3f63 	CALL __EEPROMWRB
                 ; 0000 02F3 
                 ; 0000 02F4     // Wait for completion of write
                 ; 0000 02F5     while(EECR & (1<<EEPE));
                 _0x74:
003b40 99f9      	SBIC 0x1F,1
003b41 cffe      	RJMP _0x74
                 ; 0000 02F6 
                 ; 0000 02F7     return 0;
003b42 e0e0      	LDI  R30,LOW(0)
003b43 940c 3d9a 	JMP  _0x2060002
                 ; 0000 02F8 }//write_eeprom_mem()
                 ; .FEND
                 ;//-----------------------------------------------------------------------------
                 ;/**
                 ; * @brief Read byte of data from EEPROM.
                 ; *
                 ; * @param addr address of data in bytes.
                 ; * @return char byte of read data.
                 ; */
                 ;char read_eeprom_mem(ADDR_t addr)
                 ; 0000 0301 {
                 _read_eeprom_mem:
                 ; .FSTART _read_eeprom_mem
                 ; 0000 0302     char read_data;
                 ; 0000 0303 
                 ; 0000 0304     read_data = (*((eeprom unsigned char *) addr));
003b45 93ba      	ST   -Y,R27
003b46 93aa      	ST   -Y,R26
003b47 931a      	ST   -Y,R17
                 ;	addr -> Y+1
                 ;	read_data -> R17
003b48 81a9      	LDD  R26,Y+1
003b49 81ba      	LDD  R27,Y+1+1
003b4a 940e 3f57 	CALL __EEPROMRDB
003b4c 2f1e      	MOV  R17,R30
                 ; 0000 0305 
                 ; 0000 0306     return read_data;
003b4d 8118      	LDD  R17,Y+0
003b4e 940c 3d9a 	JMP  _0x2060002
                 ; 0000 0307 }//read_eeprom_mem()
                 ; .FEND
                 ;//-----------------------------------------------------------------------------
                 ;/**
                 ; * @brief Exit boot loader mode.
                 ; *
                 ; * Switch to execute the application (jmp to 0x00 address).
                 ; *
                 ; */
                 ;void exit_bootloader(void)
                 ; 0000 0310 {
                 _exit_bootloader:
                 ; .FSTART _exit_bootloader
                 ; 0000 0311     timer_1_stop();
003b50 df47      	RCALL _timer_1_stop
                 ; 0000 0312 
                 ; 0000 0313     _WAIT_FOR_SPM();
                 _0x77:
003b51 b7e7      	IN   R30,0x37
003b52 fde0      	SBRC R30,0
003b53 cffd      	RJMP _0x77
                 ; 0000 0314     _ENABLE_RWW_SECTION();
003b54 940e 3ea0 	CALL SUBOPT_0x14
                 ; 0000 0315 
                 ; 0000 0316     // Jump to Reset vector 0x0000 in Application Section.
                 ; 0000 0317     // disable interrupts
                 ; 0000 0318     #asm("cli")
003b56 94f8      	cli
                 ; 0000 0319 
                 ; 0000 031A     #pragma optsize-
                 ; 0000 031B     // will use the interrupt vectors from the application section
                 ; 0000 031C     MCUCR=(1<<IVCE);
003b57 e0e1      	LDI  R30,LOW(1)
003b58 bfe5      	OUT  0x35,R30
                 ; 0000 031D     MCUCR=(0<<IVSEL) | (0<<IVCE);
003b59 e0e0      	LDI  R30,LOW(0)
003b5a bfe5      	OUT  0x35,R30
                 ; 0000 031E     #ifdef _OPTIMIZE_SIZE_
                 ; 0000 031F         #pragma optsize+
                 ; 0000 0320     #endif
                 ; 0000 0321 
                 ; 0000 0322     // start execution from address 0
                 ; 0000 0323     #asm("jmp 0")
003b5b 940c 0000 	jmp 0
                 ; 0000 0324 }//exit_bootloader()
003b5d 9508      	RET
                 ; .FEND
                 ;//-----------------------------------------------------------------------------
                 ;/**
                 ; * @brief Return signature of chip.
                 ; *
                 ; * Print to USART 3 bytes of chip signature.
                 ; *
                 ; */
                 ;void return_signature(void)
                 ; 0000 032D {
                 ; 0000 032E     putchar( SIGNATURE_BYTE_0 );
                 ; 0000 032F     putchar( SIGNATURE_BYTE_1 );
                 ; 0000 0330     putchar( SIGNATURE_BYTE_2 );
                 ; 0000 0331 }//return_signature()
                 ;//-----------------------------------------------------------------------------
                 ;/**
                 ; * @brief Get the char from ring USART RX-buffer
                 ; *
                 ; * @return Next data char.
                 ; */
                 ;char get_char(void)
                 ; 0000 0339 {
                 _get_char:
                 ; .FSTART _get_char
                 ; 0000 033A     char data;
                 ; 0000 033B 
                 ; 0000 033C     while (rx_counter0==0);
003b5e 931a      	ST   -Y,R17
                 ;	data -> R17
                 _0x7A:
003b5f 91e0 04e2 	LDS  R30,_rx_counter0
003b61 30e0      	CPI  R30,0
003b62 f3e1      	BREQ _0x7A
                 ; 0000 033D 
                 ; 0000 033E     data = rx_buffer0[rx_rd_index0++];
003b63 91e0 04e1 	LDS  R30,_rx_rd_index0
003b65 5fef      	SUBI R30,-LOW(1)
003b66 93e0 04e1 	STS  _rx_rd_index0,R30
003b68 50e1      	SUBI R30,LOW(1)
003b69 e0f0      	LDI  R31,0
003b6a 5be6      	SUBI R30,LOW(-_rx_buffer0)
003b6b 4ffb      	SBCI R31,HIGH(-_rx_buffer0)
003b6c 8110      	LD   R17,Z
                 ; 0000 033F     if (rx_rd_index0 == RX_BUFFER_SIZE0) rx_rd_index0 = 0;
003b6d 91a0 04e1 	LDS  R26,_rx_rd_index0
003b6f 39a6      	CPI  R26,LOW(0x96)
003b70 f419      	BRNE _0x7D
003b71 e0e0      	LDI  R30,LOW(0)
003b72 93e0 04e1 	STS  _rx_rd_index0,R30
                 ; 0000 0340 
                 ; 0000 0341     #asm("cli")
                 _0x7D:
003b74 94f8      	cli
                 ; 0000 0342     --rx_counter0;
003b75 91e0 04e2 	LDS  R30,_rx_counter0
003b77 50e1      	SUBI R30,LOW(1)
003b78 93e0 04e2 	STS  _rx_counter0,R30
                 ; 0000 0343     #asm("sei")
003b7a 9478      	sei
                 ; 0000 0344     return data;
003b7b 2fe1      	MOV  R30,R17
003b7c 9119      	LD   R17,Y+
003b7d 9508      	RET
                 ; 0000 0345 }//get_char()
                 ; .FEND
                 ;//-----------------------------------------------------------------------------
                 ;/**
                 ; * @brief Change STATE MACHINE state, and save previous state.
                 ; *
                 ; * @param new_state
                 ; */
                 ;void new_state(unsigned char new_state)
                 ; 0000 034D {
                 _new_state:
                 ; .FSTART _new_state
                 ; 0000 034E     prev_state = current_state;
003b7e 93aa      	ST   -Y,R26
                 ;	new_state -> Y+0
003b7f 91e0 04e6 	LDS  R30,_current_state
003b81 93e0 04e7 	STS  _prev_state,R30
                 ; 0000 034F     current_state = new_state;
003b83 81e8      	LD   R30,Y
003b84 93e0 04e6 	STS  _current_state,R30
                 ; 0000 0350 }//new_state()
003b86 940c 3dd0 	JMP  _0x2060001
                 ; .FEND
                 ;//-----------------------------------------------------------------------------
                 ;/**
                 ; * @brief Check and save input data.
                 ; *
                 ; * Check CRC, header and ID. Save pkg to data buff.
                 ; *
                 ; * (Convert CRC ascii to hex.)
                 ; *
                 ; * @return unsigned char - error code.
                 ; */
                 ;unsigned char check_save_pkg(unsigned int data_length)
                 ; 0000 035C {
                 _check_save_pkg:
                 ; .FSTART _check_save_pkg
                 ; 0000 035D     unsigned char err_code = DATA_ERR;
                 ; 0000 035E     unsigned char i;
                 ; 0000 035F     unsigned int in_crc;
                 ; 0000 0360     unsigned int clc_crc;
                 ; 0000 0361 
                 ; 0000 0362     unsigned char crc_ok;
                 ; 0000 0363     unsigned char head_ok;
                 ; 0000 0364     unsigned char id_ok;
                 ; 0000 0365 
                 ; 0000 0366     if(get_char() != 'B')
003b88 93ba      	ST   -Y,R27
003b89 93aa      	ST   -Y,R26
003b8a 9723      	SBIW R28,3
003b8b 940e 3f74 	CALL __SAVELOCR6
                 ;	data_length -> Y+9
                 ;	err_code -> R17
                 ;	i -> R16
                 ;	in_crc -> R18,R19
                 ;	clc_crc -> R20,R21
                 ;	crc_ok -> Y+8
                 ;	head_ok -> Y+7
                 ;	id_ok -> Y+6
003b8d e011      	LDI  R17,1
003b8e dfcf      	RCALL _get_char
003b8f 34e2      	CPI  R30,LOW(0x42)
003b90 f011      	BREQ _0x7E
                 ; 0000 0367     {
                 ; 0000 0368         return;
003b91 e0e0      	LDI  R30,LOW(0)
003b92 c06e      	RJMP _0x2060004
                 ; 0000 0369     }
                 ; 0000 036A     else
                 _0x7E:
                 ; 0000 036B     {
                 ; 0000 036C         rx_counter0++;
003b93 91e0 04e2 	LDS  R30,_rx_counter0
003b95 5fef      	SUBI R30,-LOW(1)
003b96 93e0 04e2 	STS  _rx_counter0,R30
                 ; 0000 036D         rx_rd_index0--;
003b98 91e0 04e1 	LDS  R30,_rx_rd_index0
003b9a 50e1      	SUBI R30,LOW(1)
003b9b 93e0 04e1 	STS  _rx_rd_index0,R30
                 ; 0000 036E     }
                 ; 0000 036F 
                 ; 0000 0370     for(i = 0; i < data_length; i++)
003b9d e000      	LDI  R16,LOW(0)
                 _0x81:
003b9e 85e9      	LDD  R30,Y+9
003b9f 85fa      	LDD  R31,Y+9+1
003ba0 2fa0      	MOV  R26,R16
003ba1 e0b0      	LDI  R27,0
003ba2 17ae      	CP   R26,R30
003ba3 07bf      	CPC  R27,R31
003ba4 f460      	BRSH _0x82
                 ; 0000 0371     {
                 ; 0000 0372         ((unsigned char *)data_buff)[i] = get_char();
003ba5 2fe0      	MOV  R30,R16
003ba6 e0f0      	LDI  R31,0
003ba7 5eee      	SUBI R30,LOW(-_data_buff)
003ba8 4ffc      	SBCI R31,HIGH(-_data_buff)
003ba9 93ff      	PUSH R31
003baa 93ef      	PUSH R30
003bab dfb2      	RCALL _get_char
003bac 91af      	POP  R26
003bad 91bf      	POP  R27
003bae 93ec      	ST   X,R30
                 ; 0000 0373     }
003baf 5f0f      	SUBI R16,-1
003bb0 cfed      	RJMP _0x81
                 _0x82:
                 ; 0000 0374 
                 ; 0000 0375     // Get last 4 bytes of string and convert to 2-bytes hex CRC-16
                 ; 0000 0376     atoh( ((unsigned char *)data_buff)+data_length-4, (unsigned char *)&in_crc, 4 );
003bb1 85e9      	LDD  R30,Y+9
003bb2 85fa      	LDD  R31,Y+9+1
003bb3 5eee      	SUBI R30,LOW(-_data_buff)
003bb4 4ffc      	SBCI R31,HIGH(-_data_buff)
003bb5 9734      	SBIW R30,4
003bb6 93fa      	ST   -Y,R31
003bb7 93ea      	ST   -Y,R30
003bb8 b7ed      	IN   R30,SPL
003bb9 b7fe      	IN   R31,SPH
003bba 9731      	SBIW R30,1
003bbb 93fa      	ST   -Y,R31
003bbc 93ea      	ST   -Y,R30
003bbd 933f      	PUSH R19
003bbe 932f      	PUSH R18
003bbf e0a4      	LDI  R26,LOW(4)
003bc0 e0b0      	LDI  R27,0
003bc1 d043      	RCALL _atoh
003bc2 912f      	POP  R18
003bc3 913f      	POP  R19
                 ; 0000 0377     // Change HB/LB of input CRC
                 ; 0000 0378     in_crc = (in_crc >> 8) | (in_crc << 8);
003bc4 2fe3      	MOV  R30,R19
003bc5 70f0      	ANDI R31,HIGH(0x0)
003bc6 01df      	MOVW R26,R30
003bc7 2ff2      	MOV  R31,R18
003bc8 e0e0      	LDI  R30,LOW(0)
003bc9 2bea      	OR   R30,R26
003bca 2bfb      	OR   R31,R27
003bcb 019f      	MOVW R18,R30
                 ; 0000 0379     // Calculate CRC-16
                 ; 0000 037A     clc_crc = getCRC16_CCITT((unsigned char *) data_buff, data_length - 4);
003bcc 940e 3ea5 	CALL SUBOPT_0x15
003bce 85ab      	LDD  R26,Y+11
003bcf 50a4      	SUBI R26,LOW(4)
003bd0 940e 3d9c 	CALL _getCRC16_CCITT
003bd2 01af      	MOVW R20,R30
                 ; 0000 037B     crc_ok = (in_crc == clc_crc) ? true : false;
                +
003bd3 1742     +CP R20 , R18
003bd4 0753     +CPC R21 , R19
                 	__CPWRR 20,21,18,19
003bd5 f411      	BRNE _0x83
003bd6 e0e1      	LDI  R30,LOW(1)
003bd7 c001      	RJMP _0x84
                 _0x83:
003bd8 e0e0      	LDI  R30,LOW(0)
                 _0x84:
003bd9 87e8      	STD  Y+8,R30
                 ; 0000 037C 
                 ; 0000 037D     // Check header
                 ; 0000 037E     if( ((unsigned char *)data_buff)[0] == 'B' &&
                 ; 0000 037F         ((unsigned char *)data_buff)[1] == 'L' &&
                 ; 0000 0380         ((unsigned char *)data_buff)[2] == 'D'
                 ; 0000 0381         )
003bda 91a0 0312 	LDS  R26,_data_buff
003bdc 34a2      	CPI  R26,LOW(0x42)
003bdd f441      	BRNE _0x87
                +
003bde 91a0 0313+LDS R26 , _data_buff + ( 1 )
                 	__GETB2MN _data_buff,1
003be0 34ac      	CPI  R26,LOW(0x4C)
003be1 f421      	BRNE _0x87
                +
003be2 91a0 0314+LDS R26 , _data_buff + ( 2 )
                 	__GETB2MN _data_buff,2
003be4 34a4      	CPI  R26,LOW(0x44)
003be5 f009      	BREQ _0x88
                 _0x87:
003be6 c002      	RJMP _0x86
                 _0x88:
                 ; 0000 0382         {
                 ; 0000 0383             head_ok = true;
003be7 e0e1      	LDI  R30,LOW(1)
003be8 c001      	RJMP _0xCB
                 ; 0000 0384         }
                 ; 0000 0385     else head_ok = false;
                 _0x86:
003be9 e0e0      	LDI  R30,LOW(0)
                 _0xCB:
003bea 83ef      	STD  Y+7,R30
                 ; 0000 0386 
                 ; 0000 0387     // Check ID
                 ; 0000 0388     id_ok = ( ((unsigned char *)data_buff)[4] == DEVICE_ID ) ? true: false;
                +
003beb 91a0 0316+LDS R26 , _data_buff + ( 4 )
                 	__GETB2MN _data_buff,4
003bed 33a1      	CPI  R26,LOW(0x31)
003bee f411      	BRNE _0x8A
003bef e0e1      	LDI  R30,LOW(1)
003bf0 c001      	RJMP _0x8B
                 _0x8A:
003bf1 e0e0      	LDI  R30,LOW(0)
                 _0x8B:
003bf2 83ee      	STD  Y+6,R30
                 ; 0000 0389 
                 ; 0000 038A     err_code = ( crc_ok && head_ok && id_ok ) ? DATA_OK : DATA_ERR;
003bf3 85e8      	LDD  R30,Y+8
003bf4 30e0      	CPI  R30,0
003bf5 f031      	BREQ _0x8D
003bf6 81ef      	LDD  R30,Y+7
003bf7 30e0      	CPI  R30,0
003bf8 f019      	BREQ _0x8D
003bf9 81ee      	LDD  R30,Y+6
003bfa 30e0      	CPI  R30,0
003bfb f409      	BRNE _0x8E
                 _0x8D:
003bfc c002      	RJMP _0x8F
                 _0x8E:
003bfd e0e0      	LDI  R30,LOW(0)
003bfe c001      	RJMP _0x90
                 _0x8F:
003bff e0e1      	LDI  R30,LOW(1)
                 _0x90:
003c00 2f1e      	MOV  R17,R30
                 ; 0000 038B 
                 ; 0000 038C     #ifdef DBG
                 ; 0000 038D         printf("\n[INF] crc-%d, head-%d, id-%d\n", crc_ok, head_ok, id_ok);
                 ; 0000 038E     #endif
                 ; 0000 038F 
                 ; 0000 0390     return err_code;
                 _0x2060004:
003c01 940e 3f7b 	CALL __LOADLOCR6
003c03 962b      	ADIW R28,11
003c04 9508      	RET
                 ; 0000 0391 }//check_save_pkg()
                 ; .FEND
                 ;//-----------------------------------------------------------------------------
                 ;/**
                 ; * @brief Convert ASCII string to hex.
                 ; *
                 ; * @param ascii_ptr Pointer to start ascii string.
                 ; * @param hex_ptr Pointer to result hex value.
                 ; * @param len Length of string in bytes.
                 ; */
                 ;void atoh(unsigned char *ascii_ptr, unsigned char *hex_ptr, unsigned int len)
                 ; 0000 039B {
                 _atoh:
                 ; .FSTART _atoh
                 ; 0000 039C     int i;
                 ; 0000 039D 
                 ; 0000 039E     for(i = 0; i < (len / 2); i++)
003c05 93ba      	ST   -Y,R27
003c06 93aa      	ST   -Y,R26
003c07 931a      	ST   -Y,R17
003c08 930a      	ST   -Y,R16
                 ;	*ascii_ptr -> Y+6
                 ;	*hex_ptr -> Y+4
                 ;	len -> Y+2
                 ;	i -> R16,R17
                +
003c09 e000     +LDI R16 , LOW ( 0 )
003c0a e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x93:
003c0b 81ea      	LDD  R30,Y+2
003c0c 81fb      	LDD  R31,Y+2+1
003c0d 95f6      	LSR  R31
003c0e 95e7      	ROR  R30
003c0f 170e      	CP   R16,R30
003c10 071f      	CPC  R17,R31
003c11 f570      	BRSH _0x94
                 ; 0000 039F     {
                 ; 0000 03A0         *(hex_ptr+i)   = (*(ascii_ptr+(2*i)) <= '9') ? ((*(ascii_ptr+(2*i)) - '0') * 16 ) :  (((*(ascii_ptr+(2*i)) - 'A' ...
003c12 940e 3eaa 	CALL SUBOPT_0x16
003c14 940e 3eb1 	CALL SUBOPT_0x17
003c16 91ac      	LD   R26,X
003c17 33aa      	CPI  R26,LOW(0x3A)
003c18 f440      	BRSH _0x95
003c19 940e 3eb1 	CALL SUBOPT_0x17
003c1b 91ec      	LD   R30,X
003c1c 53e0      	SUBI R30,LOW(48)
003c1d e1a0      	LDI  R26,LOW(16)
003c1e 9fea      	MUL  R30,R26
003c1f 01f0      	MOVW R30,R0
003c20 c006      	RJMP _0x96
                 _0x95:
003c21 940e 3eb1 	CALL SUBOPT_0x17
003c23 91ec      	LD   R30,X
003c24 53e7      	SUBI R30,LOW(55)
003c25 95e2      	SWAP R30
003c26 7fe0      	ANDI R30,0xF0
                 _0x96:
003c27 01db      	MOVW R26,R22
003c28 93ec      	ST   X,R30
                 ; 0000 03A1         *(hex_ptr+i)  |= (*(ascii_ptr+(2*i)+1) <= '9') ? (*(ascii_ptr+(2*i)+1) - '0') :  (*(ascii_ptr+(2*i)+1) - 'A' + 1 ...
003c29 940e 3eaa 	CALL SUBOPT_0x16
003c2b 8000      	LD   R0,Z
003c2c 940e 3eb9 	CALL SUBOPT_0x18
003c2e 81a1      	LDD  R26,Z+1
003c2f 33aa      	CPI  R26,LOW(0x3A)
003c30 f428      	BRSH _0x98
003c31 940e 3eb9 	CALL SUBOPT_0x18
003c33 81e1      	LDD  R30,Z+1
003c34 53e0      	SUBI R30,LOW(48)
003c35 c004      	RJMP _0x99
                 _0x98:
003c36 940e 3eb9 	CALL SUBOPT_0x18
003c38 81e1      	LDD  R30,Z+1
003c39 53e7      	SUBI R30,LOW(55)
                 _0x99:
003c3a 29e0      	OR   R30,R0
003c3b 01db      	MOVW R26,R22
003c3c 93ec      	ST   X,R30
                 ; 0000 03A2     }
                +
003c3d 5f0f     +SUBI R16 , LOW ( - 1 )
003c3e 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
003c3f cfcb      	RJMP _0x93
                 _0x94:
                 ; 0000 03A3 }//atoh()
003c40 8119      	LDD  R17,Y+1
003c41 8108      	LDD  R16,Y+0
003c42 9628      	ADIW R28,8
003c43 9508      	RET
                 ; .FEND
                 ;//-----------------------------------------------------------------------------
                 ;/**
                 ; * @brief Read packege, set the last_pkg_type.
                 ; *
                 ; */
                 ;void get_pkg_type(void)
                 ; 0000 03AA {
                 _get_pkg_type:
                 ; .FSTART _get_pkg_type
                 ; 0000 03AB     last_pkg_type = PKG_NULL;
003c44 e0e0      	LDI  R30,LOW(0)
003c45 93e0 04e5 	STS  _last_pkg_type,R30
                 ; 0000 03AC 
                 ; 0000 03AD     if( ((unsigned char *)data_buff)[6] == 'F' &&
                 ; 0000 03AE         ((unsigned char *)data_buff)[7] == 'W' &&
                 ; 0000 03AF         ((unsigned char *)data_buff)[8] == 'V'
                 ; 0000 03B0         )
                +
003c47 91a0 0318+LDS R26 , _data_buff + ( 6 )
                 	__GETB2MN _data_buff,6
003c49 34a6      	CPI  R26,LOW(0x46)
003c4a f441      	BRNE _0x9C
                +
003c4b 91a0 0319+LDS R26 , _data_buff + ( 7 )
                 	__GETB2MN _data_buff,7
003c4d 35a7      	CPI  R26,LOW(0x57)
003c4e f421      	BRNE _0x9C
                +
003c4f 91a0 031a+LDS R26 , _data_buff + ( 8 )
                 	__GETB2MN _data_buff,8
003c51 35a6      	CPI  R26,LOW(0x56)
003c52 f009      	BREQ _0x9D
                 _0x9C:
003c53 c003      	RJMP _0x9B
                 _0x9D:
                 ; 0000 03B1         {
                 ; 0000 03B2             last_pkg_type = PKG_FWV;
003c54 e0e7      	LDI  R30,LOW(7)
003c55 93e0 04e5 	STS  _last_pkg_type,R30
                 ; 0000 03B3         }
                 ; 0000 03B4 
                 ; 0000 03B5     if( ((unsigned char *)data_buff)[6] == 'F' &&
                 _0x9B:
                 ; 0000 03B6         ((unsigned char *)data_buff)[7] == 'W' &&
                 ; 0000 03B7         ((unsigned char *)data_buff)[8] == 'L'
                 ; 0000 03B8         )
                +
003c57 91a0 0318+LDS R26 , _data_buff + ( 6 )
                 	__GETB2MN _data_buff,6
003c59 34a6      	CPI  R26,LOW(0x46)
003c5a f441      	BRNE _0x9F
                +
003c5b 91a0 0319+LDS R26 , _data_buff + ( 7 )
                 	__GETB2MN _data_buff,7
003c5d 35a7      	CPI  R26,LOW(0x57)
003c5e f421      	BRNE _0x9F
                +
003c5f 91a0 031a+LDS R26 , _data_buff + ( 8 )
                 	__GETB2MN _data_buff,8
003c61 34ac      	CPI  R26,LOW(0x4C)
003c62 f009      	BREQ _0xA0
                 _0x9F:
003c63 c003      	RJMP _0x9E
                 _0xA0:
                 ; 0000 03B9         {
                 ; 0000 03BA             last_pkg_type = PKG_FWL;
003c64 e0e8      	LDI  R30,LOW(8)
003c65 93e0 04e5 	STS  _last_pkg_type,R30
                 ; 0000 03BB         }
                 ; 0000 03BC 
                 ; 0000 03BD     if( ((unsigned char *)data_buff)[6] == 'B' &&
                 _0x9E:
                 ; 0000 03BE         ((unsigned char *)data_buff)[7] == 'I' &&
                 ; 0000 03BF         ((unsigned char *)data_buff)[8] == 'N'
                 ; 0000 03C0         )
                +
003c67 91a0 0318+LDS R26 , _data_buff + ( 6 )
                 	__GETB2MN _data_buff,6
003c69 34a2      	CPI  R26,LOW(0x42)
003c6a f441      	BRNE _0xA2
                +
003c6b 91a0 0319+LDS R26 , _data_buff + ( 7 )
                 	__GETB2MN _data_buff,7
003c6d 34a9      	CPI  R26,LOW(0x49)
003c6e f421      	BRNE _0xA2
                +
003c6f 91a0 031a+LDS R26 , _data_buff + ( 8 )
                 	__GETB2MN _data_buff,8
003c71 34ae      	CPI  R26,LOW(0x4E)
003c72 f009      	BREQ _0xA3
                 _0xA2:
003c73 c003      	RJMP _0xA1
                 _0xA3:
                 ; 0000 03C1         {
                 ; 0000 03C2             last_pkg_type = PKG_BIN;
003c74 e0e5      	LDI  R30,LOW(5)
003c75 93e0 04e5 	STS  _last_pkg_type,R30
                 ; 0000 03C3         }
                 ; 0000 03C4 
                 ; 0000 03C5 //vvv============== FOR REDUCE PROG SIZE
                 ; 0000 03C6     // if( ((unsigned char *)data_buff)[6] == 'C' &&
                 ; 0000 03C7     //     ((unsigned char *)data_buff)[7] == 'M' &&
                 ; 0000 03C8     //     ((unsigned char *)data_buff)[8] == 'D'
                 ; 0000 03C9     //     )
                 ; 0000 03CA     //     {
                 ; 0000 03CB     //         last_pkg_type = PKG_CMD;
                 ; 0000 03CC     //     }
                 ; 0000 03CD //^^^============== FOR REDUCE PROG SIZE
                 ; 0000 03CE 
                 ; 0000 03CF }//get_pkg_Type()
                 _0xA1:
003c77 9508      	RET
                 ; .FEND
                 ;//-----------------------------------------------------------------------------
                 ;/**
                 ; * @brief Send request with start address of next FW package.
                 ; *
                 ; * @param addr - address in bytes.
                 ; */
                 ;void req_start_byte(unsigned int addr)
                 ; 0000 03D7 {
                 _req_start_byte:
                 ; .FSTART _req_start_byte
                 ; 0000 03D8     ((unsigned char *)data_buff)[0] = 'B';
003c78 940e 3ec1 	CALL SUBOPT_0x19
                 ;	addr -> Y+0
                 ; 0000 03D9     ((unsigned char *)data_buff)[1] = 'L';
                 ; 0000 03DA     ((unsigned char *)data_buff)[2] = 'D';
                 ; 0000 03DB     ((unsigned char *)data_buff)[3] = ',';
                 ; 0000 03DC     ((unsigned char *)data_buff)[4] = DEVICE_ID;
                 ; 0000 03DD     ((unsigned char *)data_buff)[5] = ',';
                 ; 0000 03DE     ((unsigned char *)data_buff)[6] = 'R';
                 ; 0000 03DF     ((unsigned char *)data_buff)[7] = 'Q';
                 ; 0000 03E0     ((unsigned char *)data_buff)[8] = 'S';
003c7a e5e3      	LDI  R30,LOW(83)
003c7b 940e 3edc 	CALL SUBOPT_0x1A
                 ; 0000 03E1     ((unsigned char *)data_buff)[9] = ',';
                 ; 0000 03E2 
                 ; 0000 03E3     j = 13;
                 ; 0000 03E4     for (i = 0; i < 2; i++)
                 _0xA5:
003c7d e0e2      	LDI  R30,LOW(2)
003c7e 169e      	CP   R9,R30
003c7f f460      	BRSH _0xA6
                 ; 0000 03E5     {
                 ; 0000 03E6         ((unsigned char *)data_buff)[j--] = lookup[((unsigned char *)&addr)[i] & 0xf];
003c80 940e 3ee5 	CALL SUBOPT_0x1B
003c82 940e 3ef2 	CALL SUBOPT_0x1C
003c84 940e 3ef8 	CALL SUBOPT_0x1D
                 ; 0000 03E7         ((unsigned char *)data_buff)[j--] = lookup[(((unsigned char *)&addr)[i] & 0xf0) >> 4];
003c86 940e 3efb 	CALL SUBOPT_0x1E
003c88 01d0      	MOVW R26,R0
003c89 93ec      	ST   X,R30
                 ; 0000 03E8     }
003c8a 9493      	INC  R9
003c8b cff1      	RJMP _0xA5
                 _0xA6:
                 ; 0000 03E9 
                 ; 0000 03EA     ((unsigned char *)data_buff)[14] = ',';
003c8c 940e 3f03 	CALL SUBOPT_0x1F
                 ; 0000 03EB     for (loop_index = 15; loop_index < 22; loop_index++)
                 _0xA8:
003c8e 940e 3f0a 	CALL SUBOPT_0x20
003c90 f440      	BRSH _0xA9
                 ; 0000 03EC     {
                 ; 0000 03ED         ((unsigned char *)data_buff)[loop_index] = 0x30;
003c91 940e 3f0f 	CALL SUBOPT_0x21
003c93 e3e0      	LDI  R30,LOW(48)
003c94 93ec      	ST   X,R30
                 ; 0000 03EE     }
003c95 01f3      	MOVW R30,R6
003c96 9631      	ADIW R30,1
003c97 013f      	MOVW R6,R30
003c98 cff5      	RJMP _0xA8
                 _0xA9:
                 ; 0000 03EF     ((unsigned char *)data_buff)[22] = ',';
003c99 940e 3f14 	CALL SUBOPT_0x22
                 ; 0000 03F0 
                 ; 0000 03F1     i_temp_var = getCRC16_CCITT((unsigned char *)data_buff, 23);
003c9b 940e 3f18 	CALL SUBOPT_0x23
                 ; 0000 03F2     j = 26;
                 ; 0000 03F3     for (i = 0; i < 2; i++)
                 _0xAB:
003c9d e0e2      	LDI  R30,LOW(2)
003c9e 169e      	CP   R9,R30
003c9f f460      	BRSH _0xAC
                 ; 0000 03F4     {
                 ; 0000 03F5         ((unsigned char *)data_buff)[j--] = lookup[((unsigned char *)&i_temp_var)[i] & 0xf];
003ca0 940e 3f20 	CALL SUBOPT_0x24
003ca2 940e 3ef2 	CALL SUBOPT_0x1C
003ca4 93ec      	ST   X,R30
                 ; 0000 03F6         ((unsigned char *)data_buff)[j--] = lookup[(((unsigned char *)&i_temp_var)[i] & 0xf0) >> 4];
003ca5 940e 3f20 	CALL SUBOPT_0x24
003ca7 940e 3efb 	CALL SUBOPT_0x1E
003ca9 93ec      	ST   X,R30
                 ; 0000 03F7     }
003caa 9493      	INC  R9
003cab cff1      	RJMP _0xAB
                 _0xAC:
                 ; 0000 03F8 
                 ; 0000 03F9     //send request strign
                 ; 0000 03FA     for (loop_index = 0; loop_index < STD_PKG_SIZE; loop_index++)
003cac 2466      	CLR  R6
003cad 2477      	CLR  R7
                 _0xAE:
003cae 940e 3f2c 	CALL SUBOPT_0x25
003cb0 f448      	BRSH _0xAF
                 ; 0000 03FB     {
                 ; 0000 03FC         putchar( ((unsigned char *)data_buff)[loop_index] );
003cb1 940e 3f0f 	CALL SUBOPT_0x21
003cb3 91ac      	LD   R26,X
003cb4 940e 3dc8 	CALL _putchar
                 ; 0000 03FD     }
003cb6 01f3      	MOVW R30,R6
003cb7 9631      	ADIW R30,1
003cb8 013f      	MOVW R6,R30
003cb9 cff4      	RJMP _0xAE
                 _0xAF:
                 ; 0000 03FE     putchar('\r');
003cba 940e 3f31 	CALL SUBOPT_0x26
                 ; 0000 03FF     putchar('\n');
                 ; 0000 0400 }//req_start_byte()
003cbc 940c 3d88 	JMP  _0x2060003
                 ; .FEND
                 ;//-----------------------------------------------------------------------------
                 ;/**
                 ; * @brief Send request with length of next FW package.
                 ; *
                 ; * @param length - length of packege in bytes.
                 ; */
                 ;void req_data_length(unsigned int length)
                 ; 0000 0408 {
                 _req_data_length:
                 ; .FSTART _req_data_length
                 ; 0000 0409     ((unsigned char *)data_buff)[0] = 'B';
003cbe 940e 3ec1 	CALL SUBOPT_0x19
                 ;	length -> Y+0
                 ; 0000 040A     ((unsigned char *)data_buff)[1] = 'L';
                 ; 0000 040B     ((unsigned char *)data_buff)[2] = 'D';
                 ; 0000 040C     ((unsigned char *)data_buff)[3] = ',';
                 ; 0000 040D     ((unsigned char *)data_buff)[4] = DEVICE_ID;
                 ; 0000 040E     ((unsigned char *)data_buff)[5] = ',';
                 ; 0000 040F     ((unsigned char *)data_buff)[6] = 'R';
                 ; 0000 0410     ((unsigned char *)data_buff)[7] = 'Q';
                 ; 0000 0411     ((unsigned char *)data_buff)[8] = 'L';
003cc0 e4ec      	LDI  R30,LOW(76)
003cc1 940e 3edc 	CALL SUBOPT_0x1A
                 ; 0000 0412     ((unsigned char *)data_buff)[9] = ',';
                 ; 0000 0413 
                 ; 0000 0414     j = 13;
                 ; 0000 0415     for (i = 0; i < 2; i++)
                 _0xB1:
003cc3 e0e2      	LDI  R30,LOW(2)
003cc4 169e      	CP   R9,R30
003cc5 f460      	BRSH _0xB2
                 ; 0000 0416     {
                 ; 0000 0417         ((unsigned char *)data_buff)[j--] = lookup[((unsigned char *)&length)[i] & 0xf];
003cc6 940e 3ee5 	CALL SUBOPT_0x1B
003cc8 940e 3ef2 	CALL SUBOPT_0x1C
003cca 940e 3ef8 	CALL SUBOPT_0x1D
                 ; 0000 0418         ((unsigned char *)data_buff)[j--] = lookup[(((unsigned char *)&length)[i] & 0xf0) >> 4];
003ccc 940e 3efb 	CALL SUBOPT_0x1E
003cce 01d0      	MOVW R26,R0
003ccf 93ec      	ST   X,R30
                 ; 0000 0419     }
003cd0 9493      	INC  R9
003cd1 cff1      	RJMP _0xB1
                 _0xB2:
                 ; 0000 041A 
                 ; 0000 041B     ((unsigned char *)data_buff)[14] = ',';
003cd2 940e 3f03 	CALL SUBOPT_0x1F
                 ; 0000 041C     for (loop_index = 15; loop_index < 22; loop_index++)
                 _0xB4:
003cd4 940e 3f0a 	CALL SUBOPT_0x20
003cd6 f440      	BRSH _0xB5
                 ; 0000 041D     {
                 ; 0000 041E         ((unsigned char *)data_buff)[loop_index] = 0x30;
003cd7 940e 3f0f 	CALL SUBOPT_0x21
003cd9 e3e0      	LDI  R30,LOW(48)
003cda 93ec      	ST   X,R30
                 ; 0000 041F     }
003cdb 01f3      	MOVW R30,R6
003cdc 9631      	ADIW R30,1
003cdd 013f      	MOVW R6,R30
003cde cff5      	RJMP _0xB4
                 _0xB5:
                 ; 0000 0420     ((unsigned char *)data_buff)[22] = ',';
003cdf 940e 3f14 	CALL SUBOPT_0x22
                 ; 0000 0421 
                 ; 0000 0422     i_temp_var = getCRC16_CCITT((unsigned char *)data_buff, 23);
003ce1 940e 3f18 	CALL SUBOPT_0x23
                 ; 0000 0423     j = 26;
                 ; 0000 0424     for (i = 0; i < 2; i++)
                 _0xB7:
003ce3 e0e2      	LDI  R30,LOW(2)
003ce4 169e      	CP   R9,R30
003ce5 f460      	BRSH _0xB8
                 ; 0000 0425     {
                 ; 0000 0426         ((unsigned char *)data_buff)[j--] = lookup[((unsigned char *)&i_temp_var)[i] & 0xf];
003ce6 940e 3f20 	CALL SUBOPT_0x24
003ce8 940e 3ef2 	CALL SUBOPT_0x1C
003cea 93ec      	ST   X,R30
                 ; 0000 0427         ((unsigned char *)data_buff)[j--] = lookup[(((unsigned char *)&i_temp_var)[i] & 0xf0) >> 4];
003ceb 940e 3f20 	CALL SUBOPT_0x24
003ced 940e 3efb 	CALL SUBOPT_0x1E
003cef 93ec      	ST   X,R30
                 ; 0000 0428     }
003cf0 9493      	INC  R9
003cf1 cff1      	RJMP _0xB7
                 _0xB8:
                 ; 0000 0429 
                 ; 0000 042A     //send request strign
                 ; 0000 042B     for (loop_index = 0; loop_index < STD_PKG_SIZE; loop_index++)
003cf2 2466      	CLR  R6
003cf3 2477      	CLR  R7
                 _0xBA:
003cf4 940e 3f2c 	CALL SUBOPT_0x25
003cf6 f448      	BRSH _0xBB
                 ; 0000 042C     {
                 ; 0000 042D         putchar( ((unsigned char *)data_buff)[loop_index] );
003cf7 940e 3f0f 	CALL SUBOPT_0x21
003cf9 91ac      	LD   R26,X
003cfa 940e 3dc8 	CALL _putchar
                 ; 0000 042E     }
003cfc 01f3      	MOVW R30,R6
003cfd 9631      	ADIW R30,1
003cfe 013f      	MOVW R6,R30
003cff cff4      	RJMP _0xBA
                 _0xBB:
                 ; 0000 042F     putchar('\r');
003d00 940e 3f31 	CALL SUBOPT_0x26
                 ; 0000 0430     putchar('\n');
                 ; 0000 0431 }//req_data_length()
003d02 c085      	RJMP _0x2060003
                 ; .FEND
                 ;//-----------------------------------------------------------------------------
                 ;/**
                 ; * @brief Send update flash result.
                 ; *
                 ; * @param result
                 ; */
                 ;void send_upgd_result(unsigned int result)
                 ; 0000 0439 {
                 _send_upgd_result:
                 ; .FSTART _send_upgd_result
                 ; 0000 043A     ((unsigned char *)data_buff)[0] = 'B';
003d03 93ba      	ST   -Y,R27
003d04 93aa      	ST   -Y,R26
                 ;	result -> Y+0
003d05 e4e2      	LDI  R30,LOW(66)
003d06 93e0 0312 	STS  _data_buff,R30
                 ; 0000 043B     ((unsigned char *)data_buff)[1] = 'L';
003d08 e4ec      	LDI  R30,LOW(76)
                +
003d09 93e0 0313+STS _data_buff + ( 1 ) , R30
                 	__PUTB1MN _data_buff,1
                 ; 0000 043C     ((unsigned char *)data_buff)[2] = 'D';
003d0b e4e4      	LDI  R30,LOW(68)
                +
003d0c 93e0 0314+STS _data_buff + ( 2 ) , R30
                 	__PUTB1MN _data_buff,2
                 ; 0000 043D     ((unsigned char *)data_buff)[3] = ',';
003d0e e2ec      	LDI  R30,LOW(44)
                +
003d0f 93e0 0315+STS _data_buff + ( 3 ) , R30
                 	__PUTB1MN _data_buff,3
                 ; 0000 043E     ((unsigned char *)data_buff)[4] = DEVICE_ID;
003d11 e3e1      	LDI  R30,LOW(49)
                +
003d12 93e0 0316+STS _data_buff + ( 4 ) , R30
                 	__PUTB1MN _data_buff,4
                 ; 0000 043F     ((unsigned char *)data_buff)[5] = ',';
003d14 e2ec      	LDI  R30,LOW(44)
                +
003d15 93e0 0317+STS _data_buff + ( 5 ) , R30
                 	__PUTB1MN _data_buff,5
                 ; 0000 0440     ((unsigned char *)data_buff)[6] = 'U';
003d17 e5e5      	LDI  R30,LOW(85)
                +
003d18 93e0 0318+STS _data_buff + ( 6 ) , R30
                 	__PUTB1MN _data_buff,6
                 ; 0000 0441     ((unsigned char *)data_buff)[7] = 'G';
003d1a e4e7      	LDI  R30,LOW(71)
                +
003d1b 93e0 0319+STS _data_buff + ( 7 ) , R30
                 	__PUTB1MN _data_buff,7
                 ; 0000 0442     ((unsigned char *)data_buff)[8] = 'R';
003d1d e5e2      	LDI  R30,LOW(82)
003d1e 940e 3edc 	CALL SUBOPT_0x1A
                 ; 0000 0443     ((unsigned char *)data_buff)[9] = ',';
                 ; 0000 0444 
                 ; 0000 0445     j = 13;
                 ; 0000 0446     for (i = 0; i < 2; i++)
                 _0xBD:
003d20 e0e2      	LDI  R30,LOW(2)
003d21 169e      	CP   R9,R30
003d22 f460      	BRSH _0xBE
                 ; 0000 0447     {
                 ; 0000 0448         ((unsigned char *)data_buff)[j--] = lookup[((unsigned char *)&result)[i] & 0xf];
003d23 940e 3ee5 	CALL SUBOPT_0x1B
003d25 940e 3ef2 	CALL SUBOPT_0x1C
003d27 940e 3ef8 	CALL SUBOPT_0x1D
                 ; 0000 0449         ((unsigned char *)data_buff)[j--] = lookup[(((unsigned char *)&result)[i] & 0xf0) >> 4];
003d29 940e 3efb 	CALL SUBOPT_0x1E
003d2b 01d0      	MOVW R26,R0
003d2c 93ec      	ST   X,R30
                 ; 0000 044A     }
003d2d 9493      	INC  R9
003d2e cff1      	RJMP _0xBD
                 _0xBE:
                 ; 0000 044B 
                 ; 0000 044C     ((unsigned char *)data_buff)[14] = ',';
003d2f 940e 3f03 	CALL SUBOPT_0x1F
                 ; 0000 044D     for (loop_index = 15; loop_index < 22; loop_index++)
                 _0xC0:
003d31 940e 3f0a 	CALL SUBOPT_0x20
003d33 f440      	BRSH _0xC1
                 ; 0000 044E     {
                 ; 0000 044F         ((unsigned char *)data_buff)[loop_index] = 0x30;
003d34 940e 3f0f 	CALL SUBOPT_0x21
003d36 e3e0      	LDI  R30,LOW(48)
003d37 93ec      	ST   X,R30
                 ; 0000 0450     }
003d38 01f3      	MOVW R30,R6
003d39 9631      	ADIW R30,1
003d3a 013f      	MOVW R6,R30
003d3b cff5      	RJMP _0xC0
                 _0xC1:
                 ; 0000 0451     ((unsigned char *)data_buff)[22] = ',';
003d3c 940e 3f14 	CALL SUBOPT_0x22
                 ; 0000 0452 
                 ; 0000 0453     i_temp_var = getCRC16_CCITT((unsigned char *)data_buff, 23);
003d3e 940e 3f18 	CALL SUBOPT_0x23
                 ; 0000 0454     j = 26;
                 ; 0000 0455     for (i = 0; i < 2; i++)
                 _0xC3:
003d40 e0e2      	LDI  R30,LOW(2)
003d41 169e      	CP   R9,R30
003d42 f460      	BRSH _0xC4
                 ; 0000 0456     {
                 ; 0000 0457         ((unsigned char *)data_buff)[j--] = lookup[((unsigned char *)&i_temp_var)[i] & 0xf];
003d43 940e 3f20 	CALL SUBOPT_0x24
003d45 940e 3ef2 	CALL SUBOPT_0x1C
003d47 93ec      	ST   X,R30
                 ; 0000 0458         ((unsigned char *)data_buff)[j--] = lookup[(((unsigned char *)&i_temp_var)[i] & 0xf0) >> 4];
003d48 940e 3f20 	CALL SUBOPT_0x24
003d4a 940e 3efb 	CALL SUBOPT_0x1E
003d4c 93ec      	ST   X,R30
                 ; 0000 0459     }
003d4d 9493      	INC  R9
003d4e cff1      	RJMP _0xC3
                 _0xC4:
                 ; 0000 045A 
                 ; 0000 045B     //send res strign
                 ; 0000 045C     for (loop_index = 0; loop_index < STD_PKG_SIZE; loop_index++)
003d4f 2466      	CLR  R6
003d50 2477      	CLR  R7
                 _0xC6:
003d51 940e 3f2c 	CALL SUBOPT_0x25
003d53 f448      	BRSH _0xC7
                 ; 0000 045D     {
                 ; 0000 045E         putchar( ((unsigned char *)data_buff)[loop_index] );
003d54 940e 3f0f 	CALL SUBOPT_0x21
003d56 91ac      	LD   R26,X
003d57 940e 3dc8 	CALL _putchar
                 ; 0000 045F     }
003d59 01f3      	MOVW R30,R6
003d5a 9631      	ADIW R30,1
003d5b 013f      	MOVW R6,R30
003d5c cff4      	RJMP _0xC6
                 _0xC7:
                 ; 0000 0460     putchar('\r');
003d5d 940e 3f31 	CALL SUBOPT_0x26
                 ; 0000 0461     putchar('\n');
                 ; 0000 0462 }
003d5f c028      	RJMP _0x2060003
                 ; .FEND
                 ;//-----------------------------------------------------------------------------
                 ;void update_eeprom_crc(void)
                 ; 0000 0465 {
                 _update_eeprom_crc:
                 ; .FSTART _update_eeprom_crc
                 ; 0000 0466     for(loop_index = 1; loop_index < EEPROM_DATA_SIZE+1; loop_index++)
003d60 e0e1      	LDI  R30,LOW(1)
003d61 e0f0      	LDI  R31,HIGH(1)
003d62 013f      	MOVW R6,R30
                 _0xC9:
003d63 e0e9      	LDI  R30,LOW(9)
003d64 e0f0      	LDI  R31,HIGH(9)
003d65 166e      	CP   R6,R30
003d66 067f      	CPC  R7,R31
003d67 f470      	BRSH _0xCA
                 ; 0000 0467     {
                 ; 0000 0468         eprom_crc_buff[loop_index] = read_eeprom_mem(loop_index);
003d68 01f3      	MOVW R30,R6
003d69 5ce2      	SUBI R30,LOW(-_eprom_crc_buff)
003d6a 4ffb      	SBCI R31,HIGH(-_eprom_crc_buff)
003d6b 93ff      	PUSH R31
003d6c 93ef      	PUSH R30
003d6d 01d3      	MOVW R26,R6
003d6e ddd6      	RCALL _read_eeprom_mem
003d6f 91af      	POP  R26
003d70 91bf      	POP  R27
003d71 93ec      	ST   X,R30
                 ; 0000 0469     }
003d72 01f3      	MOVW R30,R6
003d73 9631      	ADIW R30,1
003d74 013f      	MOVW R6,R30
003d75 cfed      	RJMP _0xC9
                 _0xCA:
                 ; 0000 046A 
                 ; 0000 046B     i_temp_var = getCRC16_CCITT((unsigned char *)&eprom_crc_buff[1], EEPROM_DATA_SIZE);
003d76 940e 3ded 	CALL SUBOPT_0x4
003d78 940e 3de8 	CALL SUBOPT_0x3
                 ; 0000 046C 
                 ; 0000 046D     write_eeprom_mem(EEPROM_CRC_ADDR, (unsigned char)i_temp_var);
003d7a e0e9      	LDI  R30,LOW(9)
003d7b e0f0      	LDI  R31,HIGH(9)
003d7c 940e 3e44 	CALL SUBOPT_0xB
                 ; 0000 046E     write_eeprom_mem(EEPROM_CRC_ADDR+1, (unsigned char)(i_temp_var >> 8));
003d7e e0ea      	LDI  R30,LOW(10)
003d7f e0f0      	LDI  R31,HIGH(10)
003d80 940e 3e33 	CALL SUBOPT_0x9
                 ; 0000 046F 
                 ; 0000 0470     return;
003d82 9508      	RET
                 ; 0000 0471 }//update_eeprom_crc()
                 ; .FEND
                 ;//-----------------------------------------------------------------------------
                 ;#include "defines.h"
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                      #define WR_SPMCR_REG_R22 out 0x37,r22
                 ;
                 ;#pragma warn-
                 ;
                 ;unsigned char __AddrToZByteToSPMCR_LPM(void flash *addr, unsigned char ctrl)
                 ; 0001 0006 {
                 
                 	.CSEG
                 ; 0001 0007 #asm
                 ;	*addr -> Y+1
                 ;	ctrl -> Y+0
                 ; 0001 0008      ldd  r30,y+1
                 ; 0001 0009      ldd  r31,y+2
                 ; 0001 000A      ld   r22,y
                 ; 0001 000B      WR_SPMCR_REG_R22
                 ; 0001 000C      lpm
                 ; 0001 000D      mov  r30,r0
                 ; 0001 000E #endasm
                 ; 0001 000F }
                 ;
                 ;void __DataToR0ByteToSPMCR_SPM(unsigned char data, unsigned char ctrl)
                 ; 0001 0012 {
                 ___DataToR0ByteToSPMCR_SPM:
                 ; .FSTART ___DataToR0ByteToSPMCR_SPM
                 ; 0001 0013 #asm
003d83 93aa      	ST   -Y,R26
                 ;	data -> Y+1
                 ;	ctrl -> Y+0
                 ; 0001 0014      ldd  r0,y+1
003d84 8009           ldd  r0,y+1
                 ; 0001 0015      ld   r22,y
003d85 8168           ld   r22,y
                 ; 0001 0016      WR_SPMCR_REG_R22
003d86 bf67           WR_SPMCR_REG_R22
                 ; 0001 0017      spm
003d87 95e8           spm
                 ; 0001 0018 #endasm
                 ; 0001 0019 }
                 _0x2060003:
003d88 9622      	ADIW R28,2
003d89 9508      	RET
                 ; .FEND
                 ;
                 ;void __AddrToZWordToR1R0ByteToSPMCR_SPM(void flash *addr, unsigned int data, unsigned char ctrl)
                 ; 0001 001C {
                 ___AddrToZWordToR1R0ByteToSPMCR_SPM:
                 ; .FSTART ___AddrToZWordToR1R0ByteToSPMCR_SPM
                 ; 0001 001D #asm
003d8a 93aa      	ST   -Y,R26
                 ;	*addr -> Y+3
                 ;	data -> Y+1
                 ;	ctrl -> Y+0
                 ; 0001 001E      ldd  r30,y+3
003d8b 81eb           ldd  r30,y+3
                 ; 0001 001F      ldd  r31,y+4
003d8c 81fc           ldd  r31,y+4
                 ; 0001 0020      ldd  r0,y+1
003d8d 8009           ldd  r0,y+1
                 ; 0001 0021      ldd  r1,y+2
003d8e 801a           ldd  r1,y+2
                 ; 0001 0022      ld   r22,y
003d8f 8168           ld   r22,y
                 ; 0001 0023      WR_SPMCR_REG_R22
003d90 bf67           WR_SPMCR_REG_R22
                 ; 0001 0024      spm
003d91 95e8           spm
                 ; 0001 0025 #endasm
                 ; 0001 0026 }
003d92 9625      	ADIW R28,5
003d93 9508      	RET
                 ; .FEND
                 ;
                 ;void __AddrToZByteToSPMCR_SPM(void flash *addr, unsigned char ctrl)
                 ; 0001 0029 {
                 ___AddrToZByteToSPMCR_SPM:
                 ; .FSTART ___AddrToZByteToSPMCR_SPM
                 ; 0001 002A #asm
003d94 93aa      	ST   -Y,R26
                 ;	*addr -> Y+1
                 ;	ctrl -> Y+0
                 ; 0001 002B      ldd  r30,y+1
003d95 81e9           ldd  r30,y+1
                 ; 0001 002C      ldd  r31,y+2
003d96 81fa           ldd  r31,y+2
                 ; 0001 002D      ld   r22,y
003d97 8168           ld   r22,y
                 ; 0001 002E      WR_SPMCR_REG_R22
003d98 bf67           WR_SPMCR_REG_R22
                 ; 0001 002F      spm
003d99 95e8           spm
                 ; 0001 0030 #endasm
                 ; 0001 0031 }
                 _0x2060002:
003d9a 9623      	ADIW R28,3
003d9b 9508      	RET
                 ; .FEND
                 ;
                 ;void __AddrToZ24WordToR1R0ByteToSPMCR_SPM(void flash *addr, unsigned int data, unsigned char ctrl)
                 ; 0001 0034 {
                 ; 0001 0035 #asm
                 ;	*addr -> Y+3
                 ;	data -> Y+1
                 ;	ctrl -> Y+0
                 ; 0001 0036      ldd  r30,y+3
                 ; 0001 0037      ldd  r31,y+4
                 ; 0001 0038      ldd  r22,y+5
                 ; 0001 0039      out  rampz,r22
                 ; 0001 003A      ldd  r0,y+1
                 ; 0001 003B      ldd  r1,y+2
                 ; 0001 003C      ld   r22,y
                 ; 0001 003D      WR_SPMCR_REG_R22
                 ; 0001 003E      spm
                 ; 0001 003F #endasm
                 ; 0001 0040 }
                 ;
                 ;void __AddrToZ24ByteToSPMCR_SPM(void flash *addr, unsigned char ctrl)
                 ; 0001 0043 {
                 ; 0001 0044 #asm
                 ;	*addr -> Y+1
                 ;	ctrl -> Y+0
                 ; 0001 0045      ldd  r30,y+1
                 ; 0001 0046      ldd  r31,y+2
                 ; 0001 0047      ldd  r22,y+3
                 ; 0001 0048      out  rampz,r22
                 ; 0001 0049      ld   r22,y
                 ; 0001 004A      WR_SPMCR_REG_R22
                 ; 0001 004B      spm
                 ; 0001 004C #endasm
                 ; 0001 004D }
                 ;
                 ;#ifdef _WARNINGS_ON_
                 ;#pragma warn+
                 ;#endif
                 ;
                 ;#include "crc16_ccitt.h"
                 ;
                 ;/**
                 ; * @brief Get CRC16
                 ; *
                 ; * CRC-16/CCITT-FALSE
                 ; * Poly  : 0x1021
                 ; * Init  : 0xFFFF
                 ; * Revert: false
                 ; * XorOut: 0x0000
                 ; * Check : 0x29B1 ("123456789")
                 ; *
                 ; * @param data Processed data pionter.
                 ; * @param len Length of data in bytes.
                 ; * @return unsigned int CRC16.
                 ; */
                 ;unsigned int getCRC16_CCITT(unsigned char *p_data, unsigned char len)
                 ; 0002 0012 {
                 
                 	.CSEG
                 _getCRC16_CCITT:
                 ; .FSTART _getCRC16_CCITT
                 ; 0002 0013     unsigned int crc;
                 ; 0002 0014     unsigned char index;
                 ; 0002 0015 
                 ; 0002 0016     crc = CCIT_INIT;
003d9c 93aa      	ST   -Y,R26
003d9d 940e 3f76 	CALL __SAVELOCR4
                 ;	*p_data -> Y+5
                 ;	len -> Y+4
                 ;	crc -> R16,R17
                 ;	index -> R19
                +
003d9f ef0f     +LDI R16 , LOW ( - 1 )
003da0 ef1f     +LDI R17 , HIGH ( - 1 )
                 	__GETWRN 16,17,-1
                 ; 0002 0017 
                 ; 0002 0018     while (len--)
                 _0x40003:
003da1 81ec      	LDD  R30,Y+4
003da2 50e1      	SUBI R30,LOW(1)
003da3 83ec      	STD  Y+4,R30
003da4 5fef      	SUBI R30,-LOW(1)
003da5 f0e9      	BREQ _0x40005
                 ; 0002 0019     {
                 ; 0002 001A 
                 ; 0002 001B         crc ^= (unsigned int)*p_data++ << 8;
003da6 81ad      	LDD  R26,Y+5
003da7 81be      	LDD  R27,Y+5+1
003da8 91ed      	LD   R30,X+
003da9 83ad      	STD  Y+5,R26
003daa 83be      	STD  Y+5+1,R27
003dab 2ffe      	MOV  R31,R30
003dac e0e0      	LDI  R30,0
                +
003dad 270e     +EOR R16 , R30
003dae 271f     +EOR R17 , R31
                 	__EORWRR 16,17,30,31
                 ; 0002 001C 
                 ; 0002 001D         for (index = 0; index < 8; index++)
003daf e030      	LDI  R19,LOW(0)
                 _0x40007:
003db0 3038      	CPI  R19,8
003db1 f480      	BRSH _0x40008
                 ; 0002 001E         {
                 ; 0002 001F             crc = crc & 0x8000 ? (crc << 1) ^ POLYNOM_CCITT : crc << 1;
003db2 ff17      	SBRS R17,7
003db3 c008      	RJMP _0x40009
003db4 01f8      	MOVW R30,R16
003db5 0fee      	LSL  R30
003db6 1fff      	ROL  R31
003db7 e2a1      	LDI  R26,LOW(4129)
003db8 e1b0      	LDI  R27,HIGH(4129)
003db9 27ea      	EOR  R30,R26
003dba 27fb      	EOR  R31,R27
003dbb c003      	RJMP _0x4000A
                 _0x40009:
003dbc 01f8      	MOVW R30,R16
003dbd 0fee      	LSL  R30
003dbe 1fff      	ROL  R31
                 _0x4000A:
003dbf 018f      	MOVW R16,R30
                 ; 0002 0020         }
003dc0 5f3f      	SUBI R19,-1
003dc1 cfee      	RJMP _0x40007
                 _0x40008:
                 ; 0002 0021     }//while
003dc2 cfde      	RJMP _0x40003
                 _0x40005:
                 ; 0002 0022 
                 ; 0002 0023     return crc;
003dc3 01f8      	MOVW R30,R16
003dc4 940e 3f7d 	CALL __LOADLOCR4
003dc6 9627      	ADIW R28,7
003dc7 9508      	RET
                 ; 0002 0024 }
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _putchar:
                 ; .FSTART _putchar
003dc8 93aa      	ST   -Y,R26
                 _0x2000006:
003dc9 91e0 00c0 	LDS  R30,192
003dcb 72e0      	ANDI R30,LOW(0x20)
003dcc f3e1      	BREQ _0x2000006
003dcd 81e8      	LD   R30,Y
003dce 93e0 00c6 	STS  198,R30
                 _0x2060001:
003dd0 9621      	ADIW R28,1
003dd1 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _timer_1_delay_cnt:
000300           	.BYTE 0x2
                 _lookup:
000302           	.BYTE 0x10
                 _data_buff:
000312           	.BYTE 0x12C
                 _eprom_crc_buff:
00043e           	.BYTE 0x8
                 _new_fw_size:
000446           	.BYTE 0x2
                 _loaded_data_size:
000448           	.BYTE 0x2
                 _rx_buffer0:
00044a           	.BYTE 0x96
                 _rx_wr_index0:
0004e0           	.BYTE 0x1
                 _rx_rd_index0:
0004e1           	.BYTE 0x1
                 _rx_counter0:
0004e2           	.BYTE 0x1
                 _i_temp_var:
0004e3           	.BYTE 0x2
                 _last_pkg_type:
0004e5           	.BYTE 0x1
                 _current_state:
0004e6           	.BYTE 0x1
                 _prev_state:
0004e7           	.BYTE 0x1
                 _fw_version_saved:
0004e8           	.BYTE 0x1
                 _fw_length_saved:
0004e9           	.BYTE 0x1
                 _last_fw_part_flg:
0004ea           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
003dd2 ede3      	LDI  R30,LOW(211)
003dd3 93e0 0085 	STS  133,R30
003dd5 e0e0      	LDI  R30,LOW(0)
003dd6 93e0 0084 	STS  132,R30
003dd8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x1:
003dd9 91e0 0300 	LDS  R30,_timer_1_delay_cnt
003ddb 91f0 0301 	LDS  R31,_timer_1_delay_cnt+1
003ddd 9730      	SBIW R30,0
003dde 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x2:
003ddf e0b0      	LDI  R27,0
003de0 940e 3b45 	CALL _read_eeprom_mem
003de2 e0f0      	LDI  R31,0
003de3 93e0 04e3 	STS  _i_temp_var,R30
003de5 93f0 04e4 	STS  _i_temp_var+1,R31
003de7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x3:
003de8 93e0 04e3 	STS  _i_temp_var,R30
003dea 93f0 04e4 	STS  _i_temp_var+1,R31
003dec 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x4:
                +
003ded e3ef     +LDI R30 , LOW ( _eprom_crc_buff + ( 1 ) )
003dee e0f4     +LDI R31 , HIGH ( _eprom_crc_buff + ( 1 ) )
                 	__POINTW1MN _eprom_crc_buff,1
003def 93fa      	ST   -Y,R31
003df0 93ea      	ST   -Y,R30
003df1 e0a8      	LDI  R26,LOW(8)
003df2 940c 3d9c 	JMP  _getCRC16_CCITT
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x5:
003df4 e0e7      	LDI  R30,LOW(7)
003df5 e0f0      	LDI  R31,HIGH(7)
003df6 93fa      	ST   -Y,R31
003df7 93ea      	ST   -Y,R30
003df8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:35 WORDS
                 SUBOPT_0x6:
003df9 e0e0      	LDI  R30,LOW(0)
003dfa 93e0 0448 	STS  _loaded_data_size,R30
003dfc 93e0 0449 	STS  _loaded_data_size+1,R30
003dfe e0a6      	LDI  R26,LOW(6)
003dff e0b0      	LDI  R27,0
003e00 940e 3b45 	CALL _read_eeprom_mem
003e02 e0f0      	LDI  R31,0
003e03 93e0 0448 	STS  _loaded_data_size,R30
003e05 93f0 0449 	STS  _loaded_data_size+1,R31
003e07 91f0 0448 	LDS  R31,_loaded_data_size
003e09 e0e0      	LDI  R30,LOW(0)
003e0a 93e0 0448 	STS  _loaded_data_size,R30
003e0c 93f0 0449 	STS  _loaded_data_size+1,R31
003e0e e0a5      	LDI  R26,LOW(5)
003e0f e0b0      	LDI  R27,0
003e10 940e 3b45 	CALL _read_eeprom_mem
003e12 91a0 0448 	LDS  R26,_loaded_data_size
003e14 91b0 0449 	LDS  R27,_loaded_data_size+1
003e16 e0f0      	LDI  R31,0
003e17 2bea      	OR   R30,R26
003e18 2bfb      	OR   R31,R27
003e19 93e0 0448 	STS  _loaded_data_size,R30
003e1b 93f0 0449 	STS  _loaded_data_size+1,R31
003e1d 91a0 0448 	LDS  R26,_loaded_data_size
003e1f 91b0 0449 	LDS  R27,_loaded_data_size+1
003e21 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x7:
003e22 91a0 0448 	LDS  R26,_loaded_data_size
003e24 91b0 0449 	LDS  R27,_loaded_data_size+1
003e26 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x8:
                +
003e27 e1ec     +LDI R30 , LOW ( _data_buff + ( 10 ) )
003e28 e0f3     +LDI R31 , HIGH ( _data_buff + ( 10 ) )
                 	__POINTW1MN _data_buff,10
003e29 93fa      	ST   -Y,R31
003e2a 93ea      	ST   -Y,R30
003e2b eee3      	LDI  R30,LOW(_i_temp_var)
003e2c e0f4      	LDI  R31,HIGH(_i_temp_var)
003e2d 93fa      	ST   -Y,R31
003e2e 93ea      	ST   -Y,R30
003e2f e0a4      	LDI  R26,LOW(4)
003e30 e0b0      	LDI  R27,0
003e31 940c 3c05 	JMP  _atoh
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x9:
003e33 93fa      	ST   -Y,R31
003e34 93ea      	ST   -Y,R30
003e35 91e0 04e4 	LDS  R30,_i_temp_var+1
003e37 2fae      	MOV  R26,R30
003e38 940c 3b37 	JMP  _write_eeprom_mem
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0xA:
003e3a e0e0      	LDI  R30,LOW(0)
003e3b 93e0 04e5 	STS  _last_pkg_type,R30
003e3d e0a3      	LDI  R26,LOW(3)
003e3e 940e 3b7e 	CALL _new_state
003e40 e8a8      	LDI  R26,LOW(5000)
003e41 e1b3      	LDI  R27,HIGH(5000)
003e42 940c 3a9e 	JMP  _timer_1_start
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xB:
003e44 93fa      	ST   -Y,R31
003e45 93ea      	ST   -Y,R30
003e46 91a0 04e3 	LDS  R26,_i_temp_var
003e48 940c 3b37 	JMP  _write_eeprom_mem
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:31 WORDS
                 SUBOPT_0xC:
003e4a e0e0      	LDI  R30,LOW(0)
003e4b 93e0 0446 	STS  _new_fw_size,R30
003e4d 93e0 0447 	STS  _new_fw_size+1,R30
003e4f e0a4      	LDI  R26,LOW(4)
003e50 e0b0      	LDI  R27,0
003e51 940e 3b45 	CALL _read_eeprom_mem
003e53 e0f0      	LDI  R31,0
003e54 93e0 0446 	STS  _new_fw_size,R30
003e56 93f0 0447 	STS  _new_fw_size+1,R31
003e58 91f0 0446 	LDS  R31,_new_fw_size
003e5a e0e0      	LDI  R30,LOW(0)
003e5b 93e0 0446 	STS  _new_fw_size,R30
003e5d 93f0 0447 	STS  _new_fw_size+1,R31
003e5f e0a3      	LDI  R26,LOW(3)
003e60 e0b0      	LDI  R27,0
003e61 940e 3b45 	CALL _read_eeprom_mem
003e63 91a0 0446 	LDS  R26,_new_fw_size
003e65 91b0 0447 	LDS  R27,_new_fw_size+1
003e67 e0f0      	LDI  R31,0
003e68 2bea      	OR   R30,R26
003e69 2bfb      	OR   R31,R27
003e6a 93e0 0446 	STS  _new_fw_size,R30
003e6c 93f0 0447 	STS  _new_fw_size+1,R31
003e6e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xD:
003e6f e0e5      	LDI  R30,LOW(5)
003e70 e0f0      	LDI  R31,HIGH(5)
003e71 93fa      	ST   -Y,R31
003e72 93ea      	ST   -Y,R30
003e73 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xE:
003e74 940e 3b37 	CALL _write_eeprom_mem
003e76 e0e6      	LDI  R30,LOW(6)
003e77 e0f0      	LDI  R31,HIGH(6)
003e78 93fa      	ST   -Y,R31
003e79 93ea      	ST   -Y,R30
003e7a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xF:
003e7b dfa6      	RCALL SUBOPT_0x7
003e7c 91e0 0446 	LDS  R30,_new_fw_size
003e7e 91f0 0447 	LDS  R31,_new_fw_size+1
003e80 1bea      	SUB  R30,R26
003e81 0bfb      	SBC  R31,R27
003e82 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x10:
003e83 940e 3f3b 	CALL __LSLW2
003e85 940e 3f37 	CALL __LSLW4
003e87 50e0      	SUBI R30,LOW(-7168)
003e88 4ef4      	SBCI R31,HIGH(-7168)
003e89 012f      	MOVW R4,R30
003e8a e8e0      	LDI  R30,LOW(128)
003e8b e0f0      	LDI  R31,HIGH(128)
003e8c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x11:
003e8d 93fa      	ST   -Y,R31
003e8e 93ea      	ST   -Y,R30
003e8f e4e6      	LDI  R30,LOW(70)
003e90 93ea      	ST   -Y,R30
003e91 e0a4      	LDI  R26,LOW(4)
003e92 e0b0      	LDI  R27,HIGH(4)
003e93 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x12:
003e94 93fa      	ST   -Y,R31
003e95 93ea      	ST   -Y,R30
003e96 e1e2      	LDI  R30,LOW(_data_buff)
003e97 e0f3      	LDI  R31,HIGH(_data_buff)
003e98 cff4      	RJMP SUBOPT_0x11
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x13:
003e99 85a8      	LDD  R26,Y+8
003e9a 85b9      	LDD  R27,Y+8+1
003e9b 940e 3f53 	CALL __GETW1P
003e9d 0fee      	LSL  R30
003e9e 1fff      	ROL  R31
003e9f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x14:
003ea0 e0e0      	LDI  R30,LOW(0)
003ea1 93ea      	ST   -Y,R30
003ea2 e1a1      	LDI  R26,LOW(17)
003ea3 940c 3d83 	JMP  ___DataToR0ByteToSPMCR_SPM
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x15:
003ea5 e1e2      	LDI  R30,LOW(_data_buff)
003ea6 e0f3      	LDI  R31,HIGH(_data_buff)
003ea7 93fa      	ST   -Y,R31
003ea8 93ea      	ST   -Y,R30
003ea9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x16:
003eaa 01f8      	MOVW R30,R16
003eab 81ac      	LDD  R26,Y+4
003eac 81bd      	LDD  R27,Y+4+1
003ead 0fea      	ADD  R30,R26
003eae 1ffb      	ADC  R31,R27
003eaf 01bf      	MOVW R22,R30
003eb0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x17:
003eb1 01f8      	MOVW R30,R16
003eb2 0fee      	LSL  R30
003eb3 1fff      	ROL  R31
003eb4 81ae      	LDD  R26,Y+6
003eb5 81bf      	LDD  R27,Y+6+1
003eb6 0fae      	ADD  R26,R30
003eb7 1fbf      	ADC  R27,R31
003eb8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x18:
003eb9 01f8      	MOVW R30,R16
003eba 0fee      	LSL  R30
003ebb 1fff      	ROL  R31
003ebc 81ae      	LDD  R26,Y+6
003ebd 81bf      	LDD  R27,Y+6+1
003ebe 0fea      	ADD  R30,R26
003ebf 1ffb      	ADC  R31,R27
003ec0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x19:
003ec1 93ba      	ST   -Y,R27
003ec2 93aa      	ST   -Y,R26
003ec3 e4e2      	LDI  R30,LOW(66)
003ec4 93e0 0312 	STS  _data_buff,R30
003ec6 e4ec      	LDI  R30,LOW(76)
                +
003ec7 93e0 0313+STS _data_buff + ( 1 ) , R30
                 	__PUTB1MN _data_buff,1
003ec9 e4e4      	LDI  R30,LOW(68)
                +
003eca 93e0 0314+STS _data_buff + ( 2 ) , R30
                 	__PUTB1MN _data_buff,2
003ecc e2ec      	LDI  R30,LOW(44)
                +
003ecd 93e0 0315+STS _data_buff + ( 3 ) , R30
                 	__PUTB1MN _data_buff,3
003ecf e3e1      	LDI  R30,LOW(49)
                +
003ed0 93e0 0316+STS _data_buff + ( 4 ) , R30
                 	__PUTB1MN _data_buff,4
003ed2 e2ec      	LDI  R30,LOW(44)
                +
003ed3 93e0 0317+STS _data_buff + ( 5 ) , R30
                 	__PUTB1MN _data_buff,5
003ed5 e5e2      	LDI  R30,LOW(82)
                +
003ed6 93e0 0318+STS _data_buff + ( 6 ) , R30
                 	__PUTB1MN _data_buff,6
003ed8 e5e1      	LDI  R30,LOW(81)
                +
003ed9 93e0 0319+STS _data_buff + ( 7 ) , R30
                 	__PUTB1MN _data_buff,7
003edb 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x1A:
                +
003edc 93e0 031a+STS _data_buff + ( 8 ) , R30
                 	__PUTB1MN _data_buff,8
003ede e2ec      	LDI  R30,LOW(44)
                +
003edf 93e0 031b+STS _data_buff + ( 9 ) , R30
                 	__PUTB1MN _data_buff,9
003ee1 e0ed      	LDI  R30,LOW(13)
003ee2 2e8e      	MOV  R8,R30
003ee3 2499      	CLR  R9
003ee4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:52 WORDS
                 SUBOPT_0x1B:
003ee5 2de8      	MOV  R30,R8
003ee6 948a      	DEC  R8
003ee7 e0f0      	LDI  R31,0
003ee8 5eee      	SUBI R30,LOW(-_data_buff)
003ee9 4ffc      	SBCI R31,HIGH(-_data_buff)
003eea 010f      	MOVW R0,R30
003eeb 2de9      	MOV  R30,R9
003eec e0f0      	LDI  R31,0
003eed 01de      	MOVW R26,R28
003eee 0fae      	ADD  R26,R30
003eef 1fbf      	ADC  R27,R31
003ef0 91ec      	LD   R30,X
003ef1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x1C:
003ef2 70ef      	ANDI R30,LOW(0xF)
003ef3 e0f0      	LDI  R31,0
003ef4 5fee      	SUBI R30,LOW(-_lookup)
003ef5 4ffc      	SBCI R31,HIGH(-_lookup)
003ef6 81e0      	LD   R30,Z
003ef7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1D:
003ef8 01d0      	MOVW R26,R0
003ef9 93ec      	ST   X,R30
003efa cfea      	RJMP SUBOPT_0x1B
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:22 WORDS
                 SUBOPT_0x1E:
003efb 7fe0      	ANDI R30,LOW(0xF0)
003efc 95e2      	SWAP R30
003efd 70ef      	ANDI R30,0xF
003efe e0f0      	LDI  R31,0
003eff 5fee      	SUBI R30,LOW(-_lookup)
003f00 4ffc      	SBCI R31,HIGH(-_lookup)
003f01 81e0      	LD   R30,Z
003f02 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x1F:
003f03 e2ec      	LDI  R30,LOW(44)
                +
003f04 93e0 0320+STS _data_buff + ( 14 ) , R30
                 	__PUTB1MN _data_buff,14
003f06 e0ef      	LDI  R30,LOW(15)
003f07 e0f0      	LDI  R31,HIGH(15)
003f08 013f      	MOVW R6,R30
003f09 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x20:
003f0a e1e6      	LDI  R30,LOW(22)
003f0b e0f0      	LDI  R31,HIGH(22)
003f0c 166e      	CP   R6,R30
003f0d 067f      	CPC  R7,R31
003f0e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x21:
003f0f e1a2      	LDI  R26,LOW(_data_buff)
003f10 e0b3      	LDI  R27,HIGH(_data_buff)
003f11 0da6      	ADD  R26,R6
003f12 1db7      	ADC  R27,R7
003f13 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x22:
003f14 e2ec      	LDI  R30,LOW(44)
                +
003f15 93e0 0328+STS _data_buff + ( 22 ) , R30
                 	__PUTB1MN _data_buff,22
003f17 cf8d      	RJMP SUBOPT_0x15
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x23:
003f18 e1a7      	LDI  R26,LOW(23)
003f19 940e 3d9c 	CALL _getCRC16_CCITT
003f1b decc      	RCALL SUBOPT_0x3
003f1c e1ea      	LDI  R30,LOW(26)
003f1d 2e8e      	MOV  R8,R30
003f1e 2499      	CLR  R9
003f1f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:42 WORDS
                 SUBOPT_0x24:
003f20 2de8      	MOV  R30,R8
003f21 948a      	DEC  R8
003f22 e0f0      	LDI  R31,0
003f23 5eee      	SUBI R30,LOW(-_data_buff)
003f24 4ffc      	SBCI R31,HIGH(-_data_buff)
003f25 01df      	MOVW R26,R30
003f26 2de9      	MOV  R30,R9
003f27 e0f0      	LDI  R31,0
003f28 51ed      	SUBI R30,LOW(-_i_temp_var)
003f29 4ffb      	SBCI R31,HIGH(-_i_temp_var)
003f2a 81e0      	LD   R30,Z
003f2b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x25:
003f2c e1eb      	LDI  R30,LOW(27)
003f2d e0f0      	LDI  R31,HIGH(27)
003f2e 166e      	CP   R6,R30
003f2f 067f      	CPC  R7,R31
003f30 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x26:
003f31 e0ad      	LDI  R26,LOW(13)
003f32 940e 3dc8 	CALL _putchar
003f34 e0aa      	LDI  R26,LOW(10)
003f35 940c 3dc8 	JMP  _putchar
                 
                 
                 	.CSEG
                 __LSLW4:
003f37 0fee      	LSL  R30
003f38 1fff      	ROL  R31
                 __LSLW3:
003f39 0fee      	LSL  R30
003f3a 1fff      	ROL  R31
                 __LSLW2:
003f3b 0fee      	LSL  R30
003f3c 1fff      	ROL  R31
003f3d 0fee      	LSL  R30
003f3e 1fff      	ROL  R31
003f3f 9508      	RET
                 
                 __DIVW21U:
003f40 2400      	CLR  R0
003f41 2411      	CLR  R1
003f42 e190      	LDI  R25,16
                 __DIVW21U1:
003f43 0faa      	LSL  R26
003f44 1fbb      	ROL  R27
003f45 1c00      	ROL  R0
003f46 1c11      	ROL  R1
003f47 1a0e      	SUB  R0,R30
003f48 0a1f      	SBC  R1,R31
003f49 f418      	BRCC __DIVW21U2
003f4a 0e0e      	ADD  R0,R30
003f4b 1e1f      	ADC  R1,R31
003f4c c001      	RJMP __DIVW21U3
                 __DIVW21U2:
003f4d 60a1      	SBR  R26,1
                 __DIVW21U3:
003f4e 959a      	DEC  R25
003f4f f799      	BRNE __DIVW21U1
003f50 01fd      	MOVW R30,R26
003f51 01d0      	MOVW R26,R0
003f52 9508      	RET
                 
                 __GETW1P:
003f53 91ed      	LD   R30,X+
003f54 91fc      	LD   R31,X
003f55 9711      	SBIW R26,1
003f56 9508      	RET
                 
                 __EEPROMRDB:
003f57 99f9      	SBIC EECR,EEWE
003f58 cffe      	RJMP __EEPROMRDB
003f59 93ff      	PUSH R31
003f5a b7ff      	IN   R31,SREG
003f5b 94f8      	CLI
003f5c bda1      	OUT  EEARL,R26
003f5d bdb2      	OUT  EEARH,R27
003f5e 9af8      	SBI  EECR,EERE
003f5f b5e0      	IN   R30,EEDR
003f60 bfff      	OUT  SREG,R31
003f61 91ff      	POP  R31
003f62 9508      	RET
                 
                 __EEPROMWRB:
003f63 9bf9      	SBIS EECR,EEWE
003f64 c002      	RJMP __EEPROMWRB1
003f65 95a8      	WDR
003f66 cffc      	RJMP __EEPROMWRB
                 __EEPROMWRB1:
003f67 b79f      	IN   R25,SREG
003f68 94f8      	CLI
003f69 bda1      	OUT  EEARL,R26
003f6a bdb2      	OUT  EEARH,R27
003f6b 9af8      	SBI  EECR,EERE
003f6c b580      	IN   R24,EEDR
003f6d 17e8      	CP   R30,R24
003f6e f019      	BREQ __EEPROMWRB0
003f6f bde0      	OUT  EEDR,R30
003f70 9afa      	SBI  EECR,EEMWE
003f71 9af9      	SBI  EECR,EEWE
                 __EEPROMWRB0:
003f72 bf9f      	OUT  SREG,R25
003f73 9508      	RET
                 
                 __SAVELOCR6:
003f74 935a      	ST   -Y,R21
                 __SAVELOCR5:
003f75 934a      	ST   -Y,R20
                 __SAVELOCR4:
003f76 933a      	ST   -Y,R19
                 __SAVELOCR3:
003f77 932a      	ST   -Y,R18
                 __SAVELOCR2:
003f78 931a      	ST   -Y,R17
003f79 930a      	ST   -Y,R16
003f7a 9508      	RET
                 
                 __LOADLOCR6:
003f7b 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
003f7c 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
003f7d 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
003f7e 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
003f7f 8119      	LDD  R17,Y+1
003f80 8108      	LD   R16,Y
003f81 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega328P register use summary:
r0 :  19 r1 :   6 r2 :   0 r3 :   0 r4 :   4 r5 :   2 r6 :  46 r7 :  12 
r8 :   6 r9 :  16 r10:   7 r11:   2 r12:  10 r13:   4 r14:   0 r15:   0 
r16:  32 r17:  27 r18:  16 r19:  15 r20:  11 r21:   9 r22:  11 r23:   0 
r24:   9 r25:   6 r26: 206 r27:  74 r28:  13 r29:   1 r30: 531 r31: 170 
x  :  37 y  : 173 z  :  19 
Registers used: 30 out of 35 (85.7%)

ATmega328P instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  10 add   :  10 
adiw  :  25 and   :   0 andi  :   7 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :  20 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 
brlt  :   0 brmi  :   0 brne  :  46 brpl  :   0 brsh  :  26 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  : 145 
cbi   :   0 cbr   :   1 clc   :   0 clh   :   0 cli   :   5 cln   :   0 
clr   :  16 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :  23 cpc   :  18 cpi   :  52 cpse  :   0 dec   :   4 des   :   0 
eor   :   4 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :  15 inc   :   6 jmp   :  40 ld    :  37 ldd   :  60 ldi   : 266 
lds   :  62 lpm   :  11 lsl   :  13 lsr   :   2 mov   :  19 movw  :  80 
mul   :   1 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 or    :   7 
ori   :   0 out   :  21 pop   :   9 push  :   9 rcall :  53 ret   :  51 
reti  :   2 rjmp  :  72 rol   :  15 ror   :   2 sbc   :   3 sbci  :  18 
sbi   :   5 sbic  :   2 sbis  :   1 sbiw  :  10 sbr   :   1 sbrc  :   6 
sbrs  :   1 sec   :   0 seh   :   0 sei   :   2 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   6 
st    : 114 std   :   9 sts   :  82 sub   :   3 subi  :  35 swap  :   2 
tst   :   0 wdr   :   4 
Instructions used: 58 out of 116 (50.0%)

ATmega328P memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x007000 0x007f04   3788     56   3844   32768  11.7%
[.dseg] 0x000100 0x0004eb      0    491    491    2048  24.0%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 10 warnings
